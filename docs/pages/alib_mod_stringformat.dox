// #################################################################################################
//  Documentation - ALib C++ Library
//
//  Copyright 2013-2019 A-Worx GmbH, Germany
//  Published under 'Boost Software License' (a free software license, see LICENSE.txt)
// #################################################################################################

/**
\page alib_mod_stringformat   ALib Module Stringformat - Programmer's Manual

\tableofcontents


\~Comment ####################################################################################### \~
# 1. Introduction # {#alib_stringformat_intro}
This \alibmod provides string formatting facilities by implementing an approach that is common
to many programming languages and libraries. This approach offers an interface that includes the
use of a <em>"format string"</em> containing placeholders. Besides this format string, a list of
data values can be given, used to fill the placeholders.<br>

Probably one of best known samples of such an interface is the \c printf method of the
C Language. A variation of this interface is found in almost any high-level, general purpose
programing language.

Of-course, this module leverages module \alibmod_strings for all general string functions needed.
Similar important is the use of module \alibmod_boxing, which brings type-safe variadic argument
lists and allows with its feature of having "virtual functions" on boxed arguments, to have
custom formatting syntax for placeholders of custom argument type.

While it is possible to implement a formatter providing a custom placeholder syntax, two very
prominent ones are built-in with formatters:
- \alib{stringformat,FormatterJavaStyle,FormatterJavaStyle}<br>
  Implements the syntax provided with the formatter included with the core class libraries of the
  JAVA programming language. This syntax is an extension of the good old \c printf format string
  style.

- \alib{stringformat,FormatterPythonStyle,FormatterPythonStyle}<br>
  Implements the syntax provided with the formatter included with the core class libraries of the
  Python programming language. This syntax is very powerful and flexible in respect to the provision
  of syntax extensions for custom types.<br>
  Over time, this formatting syntax became the preferred syntax within \alib itself and we have
  extended the syntax even in some respects in comparison to the original definition.

Another good news is that in its very basics, <b>Python Style</b> is similar to <b>.Net</b> formatting.
This way, there is some "familiar basic syntax" available for everybody that has used formatting
in one of the languages <b>C, C++, C#, Java or Python</b> and in languages that have also mimicked
one of these styles!<br>


\~Comment ####################################################################################### \~
# 2. Using The Formatters # {#alib_stringformat_using}

By leveraging module \alibmod_boxing, which implies the use of variadic template arguments,
the invocation of the final format method is as simple as it is possible. The following
samples a simple format action with each of the two built-in formatters:

\snippet "DOX_ALIB_STRINGFORMAT.cpp"     DOX_ALIB_SF_USING_1

This produces the following result:

\snippet "DOX_ALIB_SF_USING_1.txt"     OUTPUT

Values of or pointers to any type that is "boxable" may be passed as an argument to method
\alib{stringformat,Formatter::Format}. The specific implementation of the formatter will
match the "placeholder type" with the given argument type and format the argument according to
the placeholder attributes.

\~Comment ####################################################################################### \~
## 2.1 Concatenated Formatters ## {#alib_stringformat_using_concat}

In the sample above, two different formatters are created and each is used "properly", namely with
its according syntax.<br>
To increase flexibility, the formatters of this \alibmod_nolink provide two features:
- Formatters can be concatenated
- Formatters detect format strings and on failure, pass processing to concatenated formatter.

With that information, the following code can be written:

\snippet "DOX_ALIB_STRINGFORMAT.cpp"     DOX_ALIB_SF_USING_2

\note
  While the first formatter is a simple local object (stack allocated), the second formatter is
  created on the heap (keyword \c new) then stored in field \alib{stringformat::Formatter,Next}
  of the first formatter. This field is of type \aworx{SPFormatter}, which is an alias for
  <c>std::shared_ptr<Formatter></c>, hence a C++ standard "smart pointer" that deletes it's
  contained object automatically with the deletion of the last referrer.
  Only in later chapters it will be explained why it is the preferred method to manage \alib formatter
  instances in shared pointers.


The short sample code correctly produces the following output:

\snippet "DOX_ALIB_SF_USING_2.txt"     OUTPUT

However, the placeholder syntax must not be mixed within one format string. Let's try:

\snippet "DOX_ALIB_STRINGFORMAT.cpp"     DOX_ALIB_SF_USING_3

The output is:

\snippet "DOX_ALIB_SF_USING_3.txt"     OUTPUT

This is obviously not what we wanted, but then it also did not produce an exception and it even
included the second argument, <b>"Python"</b> in the output. While exceptions are discussed in a
later chapter only, the reason that no exception is thrown here is simply explained: The first
formatter in the chain, which we defined as type
\alib{stringformat,FormatterJavaStyle,FormatterJavaStyle}, identified the format string by
reading <b>"%s"</b>. It then "consumes" this string along with as many subsequent arguments as
placeholders are found in the format string. This number is just one, as the placeholder <b>"{}"</b> is
not recognized by this formatter.

The intermediate result consequently is <b>"---Java---{}---"</b>, while the argument <b>"Python"</b>
remains unprocessed. The next section explains what happens with this remaining argument.

\~Comment ####################################################################################### \~
## 2.2 Concatenating Format Operations ## {#alib_stringformat_using_concatops}

We just continue with the sample of the previous section: The unprocessed argument <b>"Python"</b>
is not dropped, as it would have been with most implementations of a similar format functions
in other libraries and programming languages. Instead, with \alibmod_nolink_stringformat, the
formatting process starts all over again using the remaining argument as the format string.

Now, as it is not a format string (it does not contain placeholders in any known syntax) it is
just appended to the target string "as is".

\note
  For users who are familiar with modules \alibmod_boxing and \alibmod_strings: The words
  "appending as is", here means, that the remaining argument is appended to the target string in a
  \ref alib_strings_assembly_ttostring "type-specific way".
  Because all arguments are of the same type, namely \alib{boxing,Box}, this in turn means that
  box-function \alib{boxing,FAppend} is invoked on the box, which just performs
  the \ref alib_strings_assembly_ttostring "type-dependent string conversion".

In fact, for this last operation, none of the two formatters became active.
The trick here is that the abstract base class, \alib{stringformat,Formatter} already implements
method \b Format. This implementation loops over all arguments. It checks if the current first
argument is a string recognized as a format string by any of the chained formatters. If it is not,
this argument is just \ref alib_strings_assembly_ttostring "appended" to the target string and the
loop continues with the next argument in the list.<br>
If a format string is identified, control is passed to the corresponding formatter that consumes as
many further arguments as placeholders are found in that format string, and then passes control back
to the main loop.

Consequently, this approach allows to invoke \b %Format without even a format string:

\snippet "DOX_ALIB_STRINGFORMAT.cpp"     DOX_ALIB_SF_USING_4
\snippet "DOX_ALIB_SF_USING_4.txt"     OUTPUT

which probably does not make any sense, because the same result could have been achieved
much more efficiently by stating:

\snippet "DOX_ALIB_STRINGFORMAT.cpp"     DOX_ALIB_SF_USING_4b


Even the following sample, still might not make too much sense to a reader:

\snippet "DOX_ALIB_STRINGFORMAT.cpp"     DOX_ALIB_SF_USING_5

because the usual way to come to the same result, was to have only one format string with two
arguments, instead of two format strings with one argument each:

\snippet "DOX_ALIB_STRINGFORMAT.cpp"     DOX_ALIB_SF_USING_5b

So, why is this loop implemented with it's auto-detection and the option of having more than one
format string? Some sound rational for the loop is given in the next section.


\~Comment ####################################################################################### \~
## 2.3 Decoupled Format Argument Collection ## {#alib_stringformat_using_argcoll}

Method \b %Format is implemented in two overloads. The "outer" version collects variadic template
arguments and is what we used so far. All this method does is to embed the given arguments
in an object of class \alib{boxing,Boxes}, as proposed in chapter
\ref alib_boxing_boxes "11. Class Boxes and Variadic Function Arguments"
of the \ref alib_mod_boxing "Programmer's Manual of ALib Module Boxing".<br>
The instance of \b %Boxes is then passed to the "inner" overload of method \b %Format, which expects
a reference to such list of boxed values.

With this knowledge it becomes obvious, that the collection of formatting arguments (which include
one or more format strings and the corresponding placeholder values) can be "decoupled" from the
invocation of \b %Format:

\snippet "DOX_ALIB_STRINGFORMAT.cpp"     DOX_ALIB_SF_USING_6
\snippet "DOX_ALIB_SF_USING_6.txt"     OUTPUT

A reader might think for herself if and when this might become useful. It should be noted that
due to the fact that the interface of logging module \alibmod_alox builds on the same
mechanisms. The arguments there are called "logables" and might be format strings or anything else.
Therefore, also with \b %ALox the collection of log entry data can be decoupled from the final creation of
the log entry. This is especially useful for complex log-entries that are collected during
the execution of an algorithm and for example are only logged in case of an exception or other unexpected
conditions.


\~Comment ####################################################################################### \~
## 2.4 Default Formatters ## {#alib_stringformat_using_default}

In the previous samples, a local instance of a formatter (or two) has been created.
For general purpose use, this module provides a global pair of (concatenated) formatters
which are receivable with method \alib{stringformat,Stringformat::GetDefaultFormatter},
to be invoked on the singleton object of module class \b %Stringformat. As a shortcut to this rather
complicated call, inline namespace method \ref aworx::GetDefaultFormatter is defined with the
inclusion of header <c>%stringformat.hpp</c> as well.

The formatter returned is embedded in "smart pointer type"  \aworx{SPFormatter}.
During \ref alib_manual_bootstrapping "bootstrapping" of the library, a formatter of type
\alib{stringformat,FormatterPythonStyle,FormatterPythonStyle} is created with a concatenated
object of \alib{stringformat,FormatterJavaStyle,FormatterJavaStyle}.

One obvious rational for the provision of these default formatters is of-course to save memory
and processing resources by reusing the formatter instances in different parts of an application.
However, probably in most cases more important is the fact that this way, the same default
configuration is used with formatting operations. For example, if the decimal point character
of floating point numbers should be defaulted to be different than US/English standard \c '.', then
such setting could be performed with the bootstrap of the library once and for all usages across
a process.

The default formatter is used with several \alib classes already. For example method
\alib{strings,TAString::Format,AString::Format} and the corresponding constructor of
class \b %AString are just simple short-cut methods that pass the \b %AString and the arguments
to method \b %Format of the default formatter.

\~Comment ####################################################################################### \~
## 2.5 Cloning Formatters ## {#alib_stringformat_using_clone}
Formatter implementations may or may not provide default settings that for example influence
a format operation that uses minimal placeholders that omit optional formatting flags.
The built-in formatters do have such default settings.

If a software unit wishes to change some settings, the advised approach is as follows:
- Retrieve the default formatter(s)
- Create a clone of the default formatter(s) by invoking \alib{stringformat,Formatter::Clone}.
- Change the default settings of the cloned formatter.
- Use the cloned formatter.

With this procedure, any changes that an application applied to the default formatters (e.g. during
bootstrap), will remain valid in the cloned formatters in addition to the "local changes", while the
default formatters remain untouched.

For example, built-in formatters provide in fields
\alib{stringformat::FormatterStdImpl,DefaultNumberFormat} and
\alib{stringformat::FormatterStdImpl,AlternativeNumberFormat} to reflect some default behavior of
their formatting syntax.<br>
The attributes of these members might be modified to change those defaults.
While this leads to a deviation of the formatting standard, it may be used instead of providing
corresponding syntactic information within the placeholder field of each and every format string.
Some modifications may not even be possible with the given format specification syntax.

\~Comment ####################################################################################### \~
## 2.6 Exceptions ## {#alib_stringformat_using_exceptions}
The simple samples shown so far used correct format strings. In case of errorneous format strings,
the built-in formatters will throw an \alib \alib{results,Exception} defined with enumeration
\ref aworx::lib::stringformat::Exceptions.

While in the case of "hard-coded" format strings, such exceptions are not needed to be caught,
their evaluation (in debug compilations) might be very helpful for identifying what is wrong.
Of-course, when format strings are not hard-coded but instead can be provided by the users
of a software (for example in configuration files or command line parameters), a <c>try/catch</c>
block around formatting invocations is a mandatory thing, also in release compilations.

The following sample shows how an exception can be caught and its description may be written
to the standard output:

\snippet "DOX_ALIB_STRINGFORMAT.cpp"     DOX_ALIB_SF_USING_EXC_1

The output of running this code is:

\snippet "DOX_ALIB_SF_USING_EXC_1.txt"     OUTPUT

In most cases, a detailed text message, including a copy of the format string
and a "caret" symbol <c>'^'</c> that hints to the parsing error in the string is given with the
exception's description.

\~Comment ####################################################################################### \~
## 2.7 Escape Sequences In Format Strings ## {#alib_stringformat_using_escapes}

A reader of this manual might have noted already that within the given sample format strings
the newline character is provided like this: <c>"\\n"</c>. The backslash symbol is escaped
for itself. If <c>"\n"</c> was given instead, the compiler would insert the corresponding
ASCII value already. However, both formatters implemented with this module do not accept
format strings that contain the newline character. The rational for this behaviour is that this
helps to avoid ambiguities between format strings and strings found in the argument list of
method \b %Format that are not meant to be format strings.

Other escape characters, like for example <c>"\t"</c> might be given with either one or two
backslashes. The formatters will convert them to the corresponding ASCII code, if the backslash
is escaped.

Finally, class \alib{stringformat,FormatterPythonStyle,FormatterPythonStyle} recognizes
double curly braces <c>"{{"</c> and <c>"}}"</c> and converts them to a single brace.
Similar to this, class \alib{stringformat,FormatterJavaStyle,FormatterJavaStyle} recognizes
<c>"%%"</c> and converts it to a single percentage symbol.

\~Comment ####################################################################################### \~
# 3. Formatting Custom Types # {#alib_stringformat_custom_types}

As we have seen, the use of module \alibmod_boxing allows the formatters of this module to accept
any third-party data type as formatting arguments. The formatters of-course are enabled to "convert"
all C++ fundamental types to strings. But how about custom types?

The solution for custom conversion is given with the support of
\ref alib_boxing_functions "\"box-functions\"", which implement a sort of "virtual function call"
on boxed types.<br>
There are two box-functions that the built-in formatters are using.

\~Comment ####################################################################################### \~
## 3.1 Box-Function FAppend ## {#alib_stringformat_custom_types_iappend}

By default, the very simple box-function that is used by the built-in formatters for converting
arbitrary types to string values, is \alib{boxing,FAppend}.
This function is one of the built-in functions of module \alibmod_boxing and this way is not
specific to this module \alibmod_nolink_stringformat.

Usually this function's implementation just unboxes the corresponding type and
\alib{strings,T_Append,appends} the object to the target string.<br>
Let as look at an example. The following struct stores a temperature in Kelvin:

\snippet "DOX_ALIB_STRINGFORMAT.cpp"     DOX_ALIB_SF_CUSTOM_APPEND_0

If an object of this class is used with a formatter without any further preparation, the
default implementation of function \b %FAppend is invoked, which writes the memory address of the
given object. In debug-compilations, this implementation in addition writes the boxed type's name
(platform dependent and implemented with class \alib{DbgTypeDemangler}). This is shown in the
following code and output snippet:

\snippet "DOX_ALIB_STRINGFORMAT.cpp"     DOX_ALIB_SF_CUSTOM_APPEND_1

\snippet "DOX_ALIB_SF_CUSTOM_APPEND_1.txt"     OUTPUT

The first step to implement function \b %FAppend for sample type \b %Kelvin is to specialize
functor \alib{strings,T_Append} for the type:

\snippet "DOX_ALIB_STRINGFORMAT.cpp"     DOX_ALIB_SF_CUSTOM_APPEND_2

With that in place, it is possible to apply an object of this type to an AString:

\snippet "DOX_ALIB_STRINGFORMAT.cpp"     DOX_ALIB_SF_CUSTOM_APPEND_3

\snippet "DOX_ALIB_SF_CUSTOM_APPEND_3.txt"     OUTPUT

Now, we can easily implement box-function \b %FAppend, because for types that are "appendable" already,
this is done with just a simple macro that has to be placed in the
\ref alib_manual_bootstrapping "bootstrap section" of a software:

\snippet "DOX_ALIB_STRINGFORMAT.cpp"     DOX_ALIB_SF_CUSTOM_APPEND_4

With that in place, it is possible to append a \b boxed object of this type to an AString:

\snippet "DOX_ALIB_STRINGFORMAT.cpp"     DOX_ALIB_SF_CUSTOM_APPEND_5

\snippet "DOX_ALIB_SF_CUSTOM_APPEND_5.txt"     OUTPUT

Because the formatters use the same technique with the boxed arguments they receive, our sample
class can now already be used with formatters:

\snippet "DOX_ALIB_STRINGFORMAT.cpp"     DOX_ALIB_SF_CUSTOM_APPEND_6

\snippet "DOX_ALIB_SF_CUSTOM_APPEND_6.txt"     OUTPUT

To summarize this section, some bullet points should be given:
- Independently from this module \alibmod_nolink_stringformat and the formatters defined here,
  class \alib{strings,TAString,AString} provides a concept based on template meta programming that
  allows to \ref alib_strings_assembly_ttostring "append objects of arbitrary type to strings".
- With the availability of module \alibmod_boxing, a box-function named \b FAppend is established
  that is invoked in the moment an instance of class \alib{boxing,Box} is <em>appended</em>
  to an \b %AString.
- By defining a specialized version of this function for a custom type, boxed values of the
  custom type can be appended to an \b %AString.
- The formatter classes provided with this module, use this function with custom types.
- Consequently, if a custom type has already been made compatible with both modules,
  \alibmod_nolink_strings and \alibmod_nolink_boxing, no special preparations have to be made to use
  the type with the formatter classes.

\~Comment ####################################################################################### \~
## 3.2 Box-Function FFormat ## {#alib_stringformat_custom_types_fformat}

The previous section demonstrated how a custom type can be made "compatible" to \alib formatters
found in this module \alibmod_nolink_stringformat.

The given approach using box-function \b %FAppend is quite limited in that respect, that within a
format string no attributes might be given that determine how to format a custom type.
With the sampled temperature type \b "Kelvin", the output format was in celsius with one decimal
digits. If we wanted to allow Fahrenheit as an alternative output, we need to implement boxing
function \alib{stringformat,FFormat}, which was specifically created for this purpose and
consequently is defined in this module.

\note
  Type-specific format specification strings are allowed only with the Python-like syntax of format
  strings. The Java-like formatter does not provide a feature of "embedding" custom format
  specifications in the format string.

The function has three parameters: besides the box that it is invoked on and
the target string to write to, it receives a string that provides type-specific information
about how the contents is to be written. This format specification is fully type and implementation
specific and has to be documented with the specific function's documentation.

We want to implement a format string that starts with character <c>'C'</c>, <c>'F'</c>  or <c>'K'</c> to
specify celsius, fahrenheit or kelvin and a following integral number that specifies the fractional
digits of the output.

To do this, the following function declaration needs to go to a header file:

\snippet "DOX_ALIB_STRINGFORMAT.cpp"     DOX_ALIB_SF_CUSTOM_IFORMAT_1

Then, the implementation of the function has to be placed in a compilation unit. This might
look like this:

\snippet "DOX_ALIB_STRINGFORMAT.cpp"     DOX_ALIB_SF_CUSTOM_IFORMAT_2

Within the bootstrap section of the process, the function has to be registered with \alibmod_boxing:

\snippet "DOX_ALIB_STRINGFORMAT.cpp"     DOX_ALIB_SF_CUSTOM_IFORMAT_3

With that in place, we can use the custom format specification with our custom type

\snippet "DOX_ALIB_STRINGFORMAT.cpp"     DOX_ALIB_SF_CUSTOM_IFORMAT_4

The following output is produced.

\snippet "DOX_ALIB_SF_CUSTOM_IFORMAT_4.txt"     OUTPUT


As a second sample we want to look at the internal implementation of formatting date and time values.
\alib class \alib{system,CalendarDateTime} provides (native) method
\alib{system::CalendarDateTime,Format} to write time and date values in a human readable and customizable
way. This method also requires a format specification.
Now, this helper class is used to implement \b %FFormat for boxed arguments of type
\alib{time,DateTime}, which is given with class \alib{stringformat,FFormat_DateTime}.
Due to the existence of the helper class, the implementation of the function is therefore rather
simple:

\snippet "alib/stringformat/stringformat.cpp"     DOX_ALIB_BOXING_IFORMAT_DATETIME


\~Comment ####################################################################################### \~
## 4. Custom Formatters ## {#alib_stringformat_custom_formatters}

To implement a custom formatter that uses a custom format string syntax, no detailed
manual or step-by-step sample is given here. Instead just some hints as bullet points:

- The typical use-case for implementing a custom format string is to mimic an existing formatter
  of a different programing language or different C++ library, to be able to reuse the formatting
  strings, which might be resourced and shared between different implementations of a software.
- The built-in formatters both use "intermediate" class \alib{stringformat,FormatterStdImpl}
  as a base class. This class might be used for custom formatters as well, as it already implements
  a skeleton that has to be completed by implementing a set of specific abstract methods.
- It is recommended to review (and copy) the sources of one of the given formatter implementations.
  While \alib{stringformat,FormatterPythonStyle,FormatterPythonStyle} is by far the more
  powerful implementation, class \alib{stringformat,FormatterJavaStyle,FormatterJavaStyle}
  might be less complicated to start with.
- A thorough understanding of modules \alibmod_boxing and \alibmod_strings is a precondition
  for the implementation of a custom formatter.


\~Comment ####################################################################################### \~
## 5. Further Types Provided By This Module ## {#alib_stringformat_othertypes}

Besides the formatter classes that have been discussed in this Programmer's Manual, module
\alibmod_nolink_stringformat provides some other types which make use of the formatters.

As of today, these types are
- \alib{stringformat,Text},
- \alib{stringformat,PropertyFormatter} and
- \alib{stringformat,PropertyFormatters}.

Please consult the class's extensive reference documentation for more information about the
features and use of these types.
*/


