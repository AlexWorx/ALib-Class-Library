// #################################################################################################
//  Documentation - ALib C++ Library
//
//  Copyright 2013-2019 A-Worx GmbH, Germany
//  Published under 'Boost Software License' (a free software license, see LICENSE.txt)
// #################################################################################################

####################################################################################################
### Page alib_prepro
####################################################################################################

/**
\page alib_ref_prepro    ALib and the C++ Preprocessor

Generally, the (mis-)use of the C/C++ preprocessor can lead to confusion and hard to understand
compile-time errors. For all software, it is advisable to restrict the use of the preprocessor
facilities of C++ to achieve the following:
1. Pass symbol definitions from outside (the build process) to the compiler.
2. Select different versions of the code dependent on the platform, the type of \e 'build' that is to
   be achieved (e.g. debug or release builds, builds that enable/disable certain features, builds
   designed for maximizing performance or minimizing code size, etc.)
3. Macros that expand simple or repetitive information to more complex code.

<b>\alib volunteers to adhere to a corresponding separation in respect to naming and
documentation of entities relating to the preprocessor.</b>

Therefore, the reference documentation is separated into three areas:

1. \ref GrpALibCompilerSymbols <br>
2. \ref GrpALibCodeSelectorSymbols <br>
3. \ref GrpALibMacros <br>

All preprocessor symbols are prefixed with <b>ALIB_</b>. Most symbols then continue with
the name of their \alib module.
One important exclamation are the symbols defined by module \alibmod_alox, which are prefixed
<b>ALOX_</b>.

*/

