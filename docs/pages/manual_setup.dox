// #################################################################################################
//  Documentation - ALox Logging Library
//
//  Copyright 2013-2018 A-Worx GmbH, Germany
//  Published under 'Boost Software License' (a free software license, see LICENSE.txt)
// #################################################################################################

/**
\page alib_man_setup     IDE/Project Setup of ALib for C++

\tableofcontents


# 1. Introduction # {#alib_man_setup_intro}

As of today, no system installation process of a shared library version of \alib is available with
the build process defined. This has of-course the disadvantage, that every software project
needs to compile its own version of the library, and the library is by default not shared between
applications, even if compiled as a "shared library", respectively DLL.

While this may change in the future, the advantage of this approach is that an application has
a lot flexibility in respect to compiling \alib using the exact set of features it desires.

Therefore, to enable a software to use \alib, the sources of the library have to become a part
of the build process in any form. As usual, there are three possible basic options:
1. Compiling \alib to a static library,
2. compiling \alib to a shared library or
3. compiling \alib sources directly into another software entity.

When this manual section talks about "building the ALib library", one of the three options is meant.

The core development of \alib is performed using [CMake](https://cmake.org/). Therefore:

\par
  <b>The \e CMake scripts included in the \alib distributions are to be seen as the
  reference guideline to building \alib.<br>
  The \e CMake scripts are maybe more precise and up-to-date than this documentation text itself.</b>

\note
  Do not hesitate to open and read the CMake files, provided with:

        ALIB_BASE_DIR/build/cmake/ALib.cmake
        ALIB_BASE_DIR/build/cmake/ALox.cmake
\note
  They are well documented and may contain some first hints if problems arise - even to
  developers that use a different build system than \e CMake!.

<p>
\note
  Microsoft Visual Studio solution and project files which build an \alib DLL and the unit tests,
  are included in the \alib distribution.
  These may be used to compile an \alib library that includes all of \alib, which can be used
  for own projects.<br>
  Limited library projects that include only a selection of modules of \alib are not provided
  and thus have to be created if they are desired.

\~Comment ####################################################################################### \~
# 2. Performing A Test Compilation  # {#alib_man_setup_test}
Clone the \alib repository from [ALib at GitHub](https://github.com/AlexWorx/ALib-Class-Library)
to a place where you commonly store 3rd party libraries that your projects are using.
Alternatively, download and unpack the ZIP file.

We call this place the <b><em>ALIB_BASE_DIR</em></b>.
After a fresh installation, it should contain at least the following subfolders:

        ALIB_BASE_DIR/build
        ALIB_BASE_DIR/docs
        ALIB_BASE_DIR/html
        ALIB_BASE_DIR/src
        ALIB_BASE_DIR/tools


To build the unit tests, perform the following steps:

- open a console window and cd into directory:

        ALIB_BASE_DIR/build/cmake/unittests

- create two sub-directories from here, one named *debug* and the other *release*
- cd into directory *debug* and type

        cmake ..

- once \e CMake has run, type

        make -j

The compiled sample executable should have been created and you can start it with

    ./ALib_UT

Within a few seconds all unit tests should have been performed.

For a <b>release build</b>, the steps are similar.
After you cd into the 'release' folder, the cmake command is:

    cmake -DCMAKE_BUILD_TYPE=Release ..

\note
  For the unit tests, \e Google \e gtest gets downloaded (once) and incorporated
  as a source project within the binary folder. This means:
   - This library does not need to be installed anywhere else on the system
   - This library gets deleted when deleting the CMake build folder
     (in the sample above named "debug" respectively "release").


\~Comment ####################################################################################### \~
# 3. A Step-By-Step CMake Sample #  {#alib_man_setup_sample}

With using \e CMake, compiling and using \alib  is very straight forward.
Ths is because an easy to use \e CMake script is provided, which is to be included into the
main \e CMake script.

The following demonstrates this step by step along the sample project found in folder

        ALIB_BASE_DIR/src/samples/alox

<br>
<b>Step 1: Creating the CMake file</b><br>
A custom \e CMake file has to be created. To start with, the top of the file might look like this:

 \snippet "../../build/cmake/samples/ALox/CMakeLists.txt"        DOXYGEN_CMAKE_INCLUDE_1

<br>
<b>Step 2: Choose %ALib Modules</b><br>
The list of \alib modules to be included in the built is defined with \e CMake variable
\c ALIB_MODULES which has to be set prior to invoking the \alib \e CMake script.
If the variable is left empty, it will be defaulted to \b "ALL", which chooses all \alib modules
available.<br>
In our sample, we add \b "ALOX", which chooses module \alibmod_alox and all dependent modules
(Configuration, Core, Strings and Boxing):

 \snippet "../../build/cmake/samples/ALox/CMakeLists.txt"        DOXYGEN_CMAKE_INCLUDE_2


<br>
<b>Step 3: Set Other Feature Variables</b><br>
Our project should be compiled using C++ 11. This is set with:

 \snippet "../../build/cmake/samples/ALox/CMakeLists.txt"        DOXYGEN_CMAKE_INCLUDE_3


<br>
<b>Step 4: Include "ALib.cmake" </b><br>
Now we are ready to include the main \alib \e CMake script:

 \snippet "../../build/cmake/samples/ALox/CMakeLists.txt"        DOXYGEN_CMAKE_INCLUDE_4

Note that this sample is using a relative path. In a real-world sample, the path might as well
be an absolute one.
After the script is run, some global \e CMake variables and functions are defined.
All of those are documented in the next section:

<br>
<b>Step 5: Define A Library Project </b><br>
We invoke \e CMake function \c ALibAddSharedLibrary, which creates a \e CMake target called
\c "ALib_SharedLib" having all necessary settings:

 \snippet "../../build/cmake/samples/ALox/CMakeLists.txt"        DOXYGEN_CMAKE_INCLUDE_5

<br>
<b>Step 6: Define The Custom Project </b><br>
Now we are good to define our custom project in a usual way:

 \snippet "../../build/cmake/samples/ALox/CMakeLists.txt"        DOXYGEN_CMAKE_INCLUDE_6

<br>
<b>Step 7: Add Compiler And Linker Settings</b><br>
Our main project needs to share some \alib compiler and linker settings with the \alib
library project. To achieve this we invoke \e CMake function <c>ALibSetCompilerAndLinker</c>:

 \snippet "../../build/cmake/samples/ALox/CMakeLists.txt"        DOXYGEN_CMAKE_INCLUDE_7

<br>
<b>Step 8: Add Library Project To Custom Project</b><br>
The final step is to add the library project to the custom sample project, which is again a
standard \e CMake task:

 \snippet "../../build/cmake/samples/ALox/CMakeLists.txt"        DOXYGEN_CMAKE_INCLUDE_8


That's it. With this simple CMake file we have created a tailored \alib library project
and have linked this to our sample project. This is ready to be built!


\~Comment ####################################################################################### \~
# 4. The Build Process In Detail#  {#alib_man_setup_cmake}

The previous chapter demonstrated the use of the \e CMake script \c ALib.cmake provided with
\alib. In the following sections a reference documentation on all aspects of the script is
given.

Along these lines, the build requirements of \alib is explained - also for users of any other build
system. Independent from the system used, the following information has to be collected and
accordingly set with the different build tools use:

- The set of \alib source files needed that comprise the desired set of \alibmods.
- C++ Version 11 or higher (to be set with the compiler).
- Compilation symbols that select the \alibmods have to be passed to the compiler.
- Compilation symbols that choose \alib features have to be passed to the compiler.
- External library dependencies have to be determined.
- Linker flags have to be defined.

\note
  The complete set of compilation symbols that the \alib library accepts from the
  compiler (usually \e -D option) are \ref GrpALibCompilerSymbols "documented here".


\~Comment ####################################################################################### \~
## 4.1  Selecting ALib Modules ##  {#alib_man_setup_cmake_1}
\e CMake variable \c ALIB_MODULES is an input/output list which defines the particular \alibmods that should be included
in the built.
The script will process the values given and extend the list to include all necessary dependent
modules.

The values correspond to the module names, in upper case letters. As of the time of writing
this documentation, the list of valid module names is
\b SINGLETON,
\b BOXING,
\b STRINGS,
\b CORE,
\b CONFIGURATION,
\b ALOX,
\b CLI and
\b EXPRESSIONS.

The script will resolve any dependencies. For example if module \b CONFIGURATION is given in the
list, it is assured that modules \b STRINGS, \b BOXING and \b SINGLETON are included as well.

Furthermore, special name \b "ALL" will choose all modules.

\~Comment ####################################################################################### \~
## 4.2  Variables For Directory and Source Code Definitions ##  {#alib_man_setup_cmake_2}
This following \e CMake variables are available after the invocation of the script:
- \c ALIB_BASE_DIR<br>
  Defines the directory where the \alib project is stored. (Note: The directory is inferred from
  the full path information of script invoked.)
<p>

- \c ALIB_SOURCE_DIR<br>
  Defines the directory where the \alib source files are stored. The header files are located
  in the same directories.
<p>

- \c ALIB_SOURCE_FILES<br>
  The list of source files (compilation units) needed to compile \alib.
<p>

- \c ALIB_INCLUDE_FILES<br>
  The list of header files needed to compile \alib.

Variables \c ALIB_BASE_DIR, \c ALIB_SOURCE_DIR and \c ALIB_SOURCE_FILES may be set prior to invoking
the script. If done so, they are not overwritten.

\note
  For none\e CMake users, the selection of the exact minimum set of source and header files,
  is probably the most difficult (and annoying) task.
  In \e CMake we have separated the source selection into script:

            ALIB_BASE_DIR/build/cmake/ALibSources.cmake
\note
  which is invoked by the main script.

\note
  This script might be analysed to identify the source and header file dependencies of the
  different \alibmods.

\note
  Likewise, script

            ALIB_BASE_DIR/build/cmake/ALibModules.cmake
\note
  might be analysed to get actual (and correct) information about module dependencies.


\~Comment ####################################################################################### \~
## 4.3  Cached CMake Variables For Compilation Symbols ##  {#alib_man_setup_cmake_3}
The script will create a set of cached boolean \e CMake variables (which are variables that can be
edited with CMake GUI tools and various C++ IDEs).

The following variables correspond directly to \ref GrpALibCompilerSymbols "ALib Compilation Symbols":

- ALIB_AVOID_ANALYZER_WARNINGS
- ALIB_COVERAGE_COMPILE
- ALIB_DEBUG
- ALIB_DEBUG_GLIB
- ALIB_DEBUG_STRINGS
- ALIB_GDB_PP_FIND_POINTER_TYPES
- ALIB_GDB_PP_SUPPRESS_CHILDREN
- ALIB_FEAT_BOOST_REGEX
- ALIB_FEAT_BOXING_FTYPES
- ALIB_FEAT_BOXING_STD_VECTOR
- ALIB_FEAT_SINGLETON_MAPPED
- ALIB_FEAT_THREADS
- ALIB_FORCE_NARROW_STRINGS
- ALIB_FORCE_WIDE_STRINGS
- ALOX_DBG_LOG
- ALOX_DBG_LOG_CI
- ALOX_REL_LOG
- ALOX_REL_LOG_CI

In addition, the following further cached variables are set:
- <b>ALIB_CMAKE_COTIRE</b><br>
  Defines if \ref alib_man_setup_cotire "Cotire" is to be used for the built.
<p>

- <b>ALIB_VERSION</b><br>
  Defines the \alib library version. This variable can not be changed, respectively will be
  overwritten on \e CMake generation. It is specified as a cached \e CMake variable just for the
  reason of presenting the \alib version to tools that allow to modify \e CMake settings.

  Furthermore, non-cached version variables \c ALIB_VERSION_NO and \c ALIB_VERSION_REV are
  set which hold the version number and revision number as separate integral values.

\~Comment ####################################################################################### \~
## 4.4  CMake Build-Setting Variables ##  {#alib_man_setup_cmake_4}
The script will create the following non-cached \e CMake variables, which can be used to define
built settings of custom projects:

- <b>ALIB_COMPILATION_SYMBOLS</b><br>
  Will contain the \ref GrpALibCompilerSymbols "ALib Compilation Symbols", as defined by the cached variables.
  This variable can for example be used as a parameter to \e CMake function \c target_compile_definitions().
<p>

- <b>ALIB_COMPILER_WARNINGS</b><br>
  Will contain compiler parameters to set the warning level used with compiling \alib.
  This variable can for example be used as a parameter to \e CMake function \c target_compile_options().
<p>

- <b>ALIB_COMPILE_FLAGS</b><br>
  Will contain parameters to be passed to the compiler when linking \alib.
  This variable can for example be used as a parameter to \e CMake function \c target_compile_options().
<p>

- <b>ALIB_LINKER_FLAGS</b><br>
  Will contain parameters to be passed to the linker when linking \alib.
  This variable can for example be used as a parameter to \e CMake function \c set_target_properties().
<p>

- <b>ALIB_EXTERNAL_LIBS</b><br>
  Will contain a list of external libraries needed to build \alib.
  This variable can for example be used as a parameter to \e CMake function \c target_link_libraries().

In addition, the following non-cached variable is an input variable which may be set prior to
invoking the script:

- <b>ALIB_COMPILER_FEATURES</b><br>
  May contain \e CMake feature parameters to be passed to the compiler.
  This variable can for example be used as a parameter to \e CMake function \c target_compile_features().

\~Comment ####################################################################################### \~
## 4.5  CMake Functions Defined By The Script ##  {#alib_man_setup_cmake_5}
The script will define the following \e CMake functions:

- <b>ALibAddStaticLibrary</b><br>
  This parameterless function creates a static library target called \c ALib_StaticLib.
<p>

- <b>ALibAddSharedLibrary</b><br>
  This parameterless function creates a shared library (under Windows OS a DLL) target called
  \c ALib_SharedLib.
<p>

- <b>ALibSetCompilerAndLinker( target )</b><br>
  This function applies the settings of all variables listed in the previous section to the given
  \p{target}. In addition, the \e target's CMake property \c POSITION_INDEPENDENT_CODE is switched
  on.

\~Comment ####################################################################################### \~
## 4.6  Library Filename ##  {#alib_man_setup_cmake_6}
The library's filename is determined by \e CMake variable \c ALIB_LIBRARY_FILENAME.
The name is used with functions \c ALibAddStaticLibrary and \c ALibAddSharedLibrary, introduced
in the previous section.

Same as with other variables, a value might be set prior to invoking script \c ALib.cmake.
In this case, it will not be modified. If left empty, the name will be assembled according to
the following set of rules:

- The name starts with \c "alib".
<p>

- The library version is appended, for example \c "1805R0".
<p>

- In the case of debug compilations, term \c "_DBG" is appended.
<p>

- In the case of module selection \b ALL, no further rule applies. Otherwise an underscore character
  <c>'_'</c> is appended.
<p>

- In the case that one or several of the following modules is selected, the corresponding
  suffixes are added in the following order:
  - Module \b EXPRESSIONS, suffix \c "Expr"
  - Module \b CLI, suffix \c "Cli"
  - Module \b ALOX, suffix \c "Alox"

  No further rule is applied.
<p>

- In the case that either of the two following modules is selected, the corresponding
  suffixes are added in the following order:
  - Module \b CONFIGURATION, suffix \c "Cfg"
  - Module \b CORE, suffix \c "Core"

  No further rule is applied.
<p>

- In the case that either of the two following modules is selected, the corresponding
  suffixes are added in the following order:
  - Module \b STRINGS, suffix \c "Str"
  - Module \b BOXING, suffix \c "Box"
  - Module \b SINGLETON, suffix \c "Sng"


\~Comment ####################################################################################### \~
# 5. More Information #  {#alib_man_setup_more}

\~Comment ####################################################################################### \~
## 5.1 Assuring Compilation Compatibility ## {#alib_man_setup_compat}

It is important to understand that an \alib library compiled with a certain set of options
might be incompatible to compilation units that use a different set of options. For example, the
footprint (size) of library types might be different.

If incompatible compilation units are mixed, often no warning is issued (neither by
the compiler nor the linker) and the execution of a process might lead to very strange behaviour
which is irritating and hardly to debug.

To detect incompatible compilation settings, method \alib{ALib::CheckCompatibility} should be invoked
on singleton \alib{ALIB} from custom bootstrap code of each custom compilation target that uses
\alib. Code for doing so looks like this:

        aworx::lib::ALIB.CheckCompatibility( ALIB_VERSION, ALIB_COMPILATION_FLAGS );

The trick here is, that the macros provided as parameters contain compilation information.
The method compares this information to the contents of the macros at the time of library
compilation.

If \e CMake function \c ALibSetCompilerAndLinker (see \ref alib_man_setup_cmake_5) is used with
a custom target, all settings are guaranteed to be compatible.

\~Comment ####################################################################################### \~
## 5.2 Choosing C++ Language Version ## {#alib_man_setup_cppversion}

As demonstrated in the chapter \ref alib_man_setup_sample "A Step-By-Step CMake Sample" (Step 3),
\e CMake variable \c ALIB_COMPILER_FEATURES may be used to determine the C++ language standard for
\alib targets and optionally for custom targets (i.e. if function \c ALibSetCompilerAndLinker is
invoked for a custom target).

\alib requires C++ language level \c 11 as a minimum and is compatible with levels \c 14 and \c 17.
\alib might perform better with higher language levels.

\e CMake provides other (maybe even more preferable) mechanics to determine/set the C++ language
level, which of course may be used alternatively.

\~Comment ####################################################################################### \~
## 5.3 Copying The Sources ## {#alib_man_setup_copysources}

If \e CMake variable \c ALIB_MODULE_SOURCE_COPY_DIR is set prior to invoking CMake script
\c %ALib.cmake, then the source code (compilation units and header files) are copied to the
directory specified in the variable. If the variable does not point to a valid directory, an
error is raised and the \e CMake script is stopped.

The files copies represent exactly the files which are needed for compiling the \alibmods, which
are optionally specified with list variable \c ALIB_MODULES (see \ref alib_man_setup_cmake_1).

\~Comment ####################################################################################### \~
## 5.4 Using Cotire To Speed-Up Builds ## {#alib_man_setup_cotire}

[Cotire](https://github.com/sakra/cotire/) is an open source CMake script which modifies C++ CMake
targets in a way to speed up compilation. This is achieved using mainly two techniques: Precompiled
header files and so called "unity builds".

The provided CMake script \c %ALib.cmake defines CMake cache variable \c ALIB_CMAKE_COTIRE. If
this variable evaluates to  \c true, then the script downloads
[Cotire](https://github.com/sakra/cotire/) (once) and includes it.
In this case, script \c %ALox.cmake applies cotire to the library targets created with
\b ALibAddStaticLibrary and \b ALibAddSharedLibrary. To use cotire with custom targets, \e CMake
function \e ALibSetCotire is defined.

To benefit from the unity build option (which may cut build time quite dramatically!), you have two
options:
1. Setup your target to use project \c ALox_SharedLib_unity instead of \c ALox_SharedLib
   (respectively \c ALox_StaticLib_unity instead of \c ALox_StaticLib).
   This should be done depending on the setting of the CMake variable, as shown in the following
   sample:

   \snippet "../../tools/DoxygenGraphTemplateInstanceRemover/CMakeLists.txt"    DOXYGEN_CMAKE_COTIRE_TARGET

2. Use cotire for your project as well and then choose the new make target with suffix "_unity"
   for building. This target will automatically use the "_unity" target version of the \alox
   library as well.
   This second approach is used in the provided \b ALoxSample project and CMake file.

By default, [Cotire](https://github.com/sakra/cotire/) is switched off in the make files provided.
This is because it adds a next layer of complexity for compiling <b>%ALib/%ALox</b>.
But it is generally worth to have a try!

*/
