// #################################################################################################
//  Documentation - ALib C++ Library
//
//  Copyright 2013-2024 A-Worx GmbH, Germany
//  Published under 'Boost Software License' (a free software license, see LICENSE.txt)
// #################################################################################################

/**
\page alib_tools      Tools for ALib

\tableofcontents

\note We are happy to receive user input that helps coding with \alib with different IDEs,
      debuggers and other software development tools.


\I{################################################################################################}
# 1. Pretty Printers for GNU Debugger (gdb) ## {#alibtools_debug_helpers_gdb}

GNU debugger supports python scripts that allow the display of complex data types with so called
\https{pretty printers,sourceware.org/gdb/onlinedocs/gdb/Pretty-Printing-API.html#Pretty-Printing-API}.
ALox provides such script for its common classes and for classes of the underlying library ALib.

The script is found in the ALox source folder under

        tools/ideplugins/gdb/alibpp.py

We think the biggest problem of the concept is that the contract between the debugger and
the printers is not duly specified. This means, it is not clear, what the printers should deliver
and which format to use. Now, different IDEs seem to interpret the output of such printers differently
and the development of the script was a pain...and with new types it is never finished.
Nevertheless, they are very helpful, of-course.

Be sure to read the remarks on the top of the script!

\I{################################################################################################}


\I{################################################################################################}
# 2. Valgrind Error Suppression # {#alibtools_valgrind}
Previous versions of the library provided a
\http{.supp file,valgrind.org/docs/manual/manual-core.html#manual-core.suppress}
for the analyzer tool \http{Valgrind,valgrind.org/}.

This file is not available in current releases anymore.
Instead, code selection symbol \ref ALIB_AVOID_ANALYZER_WARNINGS
is available. This symbol changes some details of the implementation of library types, which
suppress unjustified \b Valgrind warnings.<br>
In addition, if the unit tests are built with this symbol, time-critical sections allow more time to
spend in the tests, with the effect that the unit tests successfully run under valgrind (reporting
no leaks.


\I{################################################################################################}
# 3. Doxygen Dot-File Fixer # {#alibtools_DoxygenGraphTemplateInstanceRemover}
A small tool for patching the diagrams of the \https{Doxygen,https://www.doxygen.nl}
documentation of \alib.
The cmake project is found in the ALox source folder under:

    tools/DoxygenGraphTemplateInstanceRemover

It consists only of a single \e main.cpp file and the CMake target is configured to write
the release version into the

    docs/

folder. There, when available, the tool is used by doxygen as a replacement to the
\https{Graphviz dot tool,graphviz.org}. The tool patches the dot file that is to be processed
and then invokes the original software.<br>
This tool is only needed, if the HTML documentation (which you are currently reading) is to
be 'compiled' from scratch.

<br><br><br><br><br><br> */
