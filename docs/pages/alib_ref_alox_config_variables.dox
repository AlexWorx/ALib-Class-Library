// #################################################################################################
//  Documentation - ALox Logging Library
//
//  Copyright 2015-2024 A-Worx GmbH, Germany
//  Published under 'Boost Software License' (a free software license, see LICENSE.txt)
// #################################################################################################


/** @file */ //<- needed for Doxygen include


// the variable 'declarations' to be read by doxygen (doxygen is sometimes funny)
Configuration Variable ALOX_CODE_PAGE;
Configuration Variable ALOX_CONSOLE_TYPE;
Configuration Variable ALOX_CONSOLE_LIGHT_COLORS;
Configuration Variable ALOX_GLOBAL_SOURCE_PATH_TRIM_RULES;
Configuration Variable ALOX_LOGGERNAME_AUTO_SIZES;
Configuration Variable ALOX_LOGGERNAME_FORMAT;
Configuration Variable ALOX_LOGGERNAME_FORMAT_DATE_TIME;
Configuration Variable ALOX_LOGGERNAME_FORMAT_TIME_DIFF;
Configuration Variable ALOX_LOGGERNAME_FORMAT_MULTILINE;
Configuration Variable ALOX_LOGGERNAME_MAX_ELAPSED_TIME;
Configuration Variable ALOX_LOGGERNAME_REPLACEMENTS;
Configuration Variable ALOX_LOXNAME_DOMAIN_SUBSTITUTION;
Configuration Variable ALOX_LOXNAME_LOGGERNAME_VERBOSITY;
Configuration Variable ALOX_LOXNAME_DUMP_STATE_ON_EXIT;
Configuration Variable ALOX_LOXNAME_PREFIXES;
Configuration Variable ALOX_LOXNAME_SOURCE_PATH_TRIM_RULES;
Configuration Variable ALOX_NO_IDE_LOGGER;


//##################################################################################################
// GrpALoxConfigVars
//##################################################################################################
/**
@defgroup GrpALoxConfigVars   ALox Configuration Variables
\details
Trough the use of class \alib{config,Configuration} defined in module \alib_config of the
\aliblong, external configuration variables can be comfortably defined and accessed.

While this is a reference appendix chapter, for general information, please refer to:
- The \ref alib_mod_config "Programmer's Manual" of module \alib_config_nl.
- The \ref alib::config "Reference Documentatiohn" of module \alib_config_nl.
- A quick sample how to attach an INI-file with minimum effort to an \alib enabled application
  is provided in chapter \ref alox_man_external_verbosity_configuration of the
  Programmer's Manual of module \alib_alox.

A few further configuration variables that \alib internally uses are defined by module \alib_basecamp.
The variables defined with this module are \ref GrpALibConfigVars "documented here".

<b>Default Behavior:</b><p>
\alox and the \aliblong are designed to run fine without setting configuration variables.
Therefore, these variables provide an additional way to tweak \alox and change its default
behavior.

<b>Boolean Variables:</b><p>
This documentation uses the term <em>boolean variables</em> for those variables that are evaluated
using method \alib{config,Configuration::IsTrue}.

<b>Declaration:</b><p>
The variables listed here are resourced with camp \alib_alox_nl and declared with enum
class \alib{lox::Variables}.

\note Setting environment variables is platform specific and is not part of this documentation. To
get an overview, refer to [Wikipedia](https://en.wikipedia.org/wiki/Environment_variable).<p>

@{
*/

/**
\var  ALOX_CONSOLE_TYPE
<em>Default Value</em>: \c "default"<br>

Influences the type of console logger that will be created by method
\alib{lox,Lox::CreateConsoleLogger}, which is also used by \alib{lox,Log::AddDebugLogger}.

Possible values are:
<center>Value</center>   | <center>Effect</center>
- - - - - - - - - - - - -| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   Default    | No influence, same as if variable was not set (An OS-specific, colorful logger is chosen).
   Plain      | Plain text \e Logger of type \alib{lox::loggers,ConsoleLogger} is created.
   Ansi       | A \e Logger of type \alib{lox::loggers,AnsiLogger} is created.
   Windows    | A \e Logger of type \alib{lox::loggers,WindowsConsoleLogger} is created.
*/


/**
\var  ALOX_CONSOLE_LIGHT_COLORS
<em>Default Value</em>: \c "" (empty string)<br>

Evaluated by colorful loggers that dispose about light and dark colors to adjust their foreground
color accordingly. E.g. for instances of class \alib{lox::loggers,AnsiLogger}, field
\alib{lox::loggers::AnsiLogger,UseLightColors} is set.

If not given, under Windows OS the right value is detected (here, the color of a terminal
is detectable). Otherwise the value defaults to be an empty string, which chooses a
programatically evaluated (internal) default value. In some occasions the (detected or set) runtime
environment might influence such default value.

Value options are:
- \b "Foreground": Sets the foreground color to a light color. This is recommended if for consoles
  with dark background.
- \b "Background": Sets the background color to a light color. This is recommended if for consoles
  with a light background.
- \b "Never": Sets foreground and background color to the same "brightness". This is recommended
  solely for systems that do not support light colors.

*/


/**
\var  ALOX_NO_IDE_LOGGER
<em>Default Value</em>: \c "false"<br>

Boolean variable that is evaluated in method \alib{lox,Log::AddDebugLogger}.
If not set, when debugging, an additional \e Logger supporting the log output of the IDE is created.
The only logger currently available (needed) is with WindowsOS / VisualStudio, class
\alib{lox::loggers,VStudioLogger}.

This variable can be used to suppress this.
*/

/**
\var  ALOX_CODE_PAGE
<em>Default Value</em>: \c 65001<br>
\e Availability: On target platform WindowsOS only.<br>

Evaluated once in the constructor of class \alib{lox::loggers,WindowsConsoleLogger}.
Overwrites the default value of field \alib{lox::loggers::WindowsConsoleLogger,CodePage}.
For possible values refer to
[Microsoft documentation] (https://msdn.microsoft.com/EN-US/library/windows/desktop/dd317756%28v=vs.85%29.aspx).
*/


/**
\var  ALOX_LOGGERNAME_AUTO_SIZES
<em>Default Value</em>: none.<br>

This variable is used by \e Loggers derived from abstract type \alib{lox::detail::textlogger,TextLogger}.
It is read when a \b %TextLogger is registered with a \b %Lox and written back when it is removed.<br>
This mechanism maintains automatically adjusted tabulator positions in the generated meta
information across different runs of a software.
\alib{lox::detail::textlogger,TextLogger::AutoSizes} for more information.

Note that the portion <c>'LOGGERNAME'</c> in the variable name is replaced by \alox with the value of
\alib{lox::detail,Logger::GetName}. This allows to have different sizes for different \e %Loggers.

There is no need to manually edit the values found in this variable and their values are not
documented here. Consider this variable a 'cookie' that \alox uses to store tabulator width
across sessions. The information is only stored (and successfully read back with
the next run of a process) when a write-enabled configuration plug-in (e.g. an INI file)
is available.

@see Chapter \ref alox_man_apdx_auto_config_list_logables_textlogger.
*/

/**
\var  ALOX_LOGGERNAME_MAX_ELAPSED_TIME
<em>Default Value</em>: \c "0, limit=59"<br>

Format: <c> ALOX_\<LOGGERNAME\>_MAX_ELAPSED_TIME = maximum [, limit= limitValue] </c>

This variable is used by \e Loggers of type \alib{lox::detail,textlogger::TextLogger}. It is read
when a \b %TextLogger is registered with a \b %Lox and written back when it is removed.<br>
The value stores the maximum elapsed time span of any <em>Log Statement</em> executed, measured
in seconds. Those maximum values are preserved across different sessions of an application.
If a subsequent run of a process takes more time than any previous, then this new time span
is stored as the new maximum of all sessions.<br>
The value is used to determine the number of 'digits' displayed in the meta information output
of utility class \alib{lox::detail::textlogger,MetaInfo} for format parameter \c "%TC".

Consequently, the width of the log output (in respect to meta info \c "%TC") automatically adjusts
to a reasonable value, depending on the execution time of the software.

The variable optionally supports a second attribute \c 'limit' which restricts the maximum value
when a new session starts.

Note that the portion <c>'LOGGERNAME'</c> in the variable name is replaced by \alox with the value
of \alib{lox::detail,Logger::GetName}. This allows to have different values for different \e %Loggers.

*/


/**
\var  ALOX_LOGGERNAME_FORMAT
<em>Default Value</em>: Set to the default values of the class members (fields).<br>

This variable is used by \e Loggers of type \alib{lox::detail,textlogger::TextLogger}.<br>
It is read when a \e Logger of that type is added to a \b %Lox and if found, fields
- \alib{lox::detail::textlogger,MetaInfo::Format},
- \alib{lox::detail::textlogger,MetaInfo::VerbosityError},
- \alib{lox::detail::textlogger,MetaInfo::VerbosityWarning},
- \alib{lox::detail::textlogger,MetaInfo::VerbosityInfo},
- \alib{lox::detail::textlogger,MetaInfo::VerbosityVerbose} and
- \alib{lox::detail::textlogger,TextLogger::FmtMsgSuffix}

are (optionally) set according to the variables' content. The contents of the variable is specified
as follows:

Format: <c> ALOX_\<LOGGERNAME\>_FORMAT = ["]Format["] [, ["]Error["] [, ["]Warning["] [, ["]Info["] [, ["]Verbose["] ] [, ["]MsgSuffix["] ]]]]] </c>

Values that start or end with whitespace characters or which contain comma characters (<c>,</c>) ,
need to be enclosed by quotation marks (<c>\"</c>).

Note that the portion <c>'LOGGERNAME'</c> in the variable name is replaced by \alox as follows:
- \alib{lox::detail,Logger::GetName} of the \b Logger constructed is used.
- If no configuration setting is found for that name, the value of
  \alib{lox::detail,Logger::GetTypeName} is used.

This allows to configure either a single \e %Logger or a whole class of \e %Loggers.

As a sample, configuration variable \b ALOX_ANSI_CONSOLE_LOGGER_FORMAT, affects all loggers of type
\alib{lox::loggers,AnsiConsoleLogger} as long as no specific name is set when such \e %Logger is
constructed and no separate configuration for that name is set.

Note that the default debug \e %Logger which is automatically created if no \e %Logger is
attached to the debug \b %Lox singleton, is named \c "DEBUG_LOGGER". Therefore, by setting variable
\c ALOX_DEBUG_LOGGER_FORMAT, this \e Logger is affected.
Furthermore, whith debugging, a second debug-\e Logger for the IDE might be created.
 Its' name is \c "IDE_LOGGER".
*/


/**
\var  ALOX_LOGGERNAME_FORMAT_DATE_TIME
<em>Default Value</em>: Set to the default values of the class members (fields).<br>

This variable is used and applied in the same way as \ref ALOX_LOGGERNAME_FORMAT, but
defines the following fields:

- \alib{lox::detail::textlogger,MetaInfo::DateFormat},
- \alib{lox::detail::textlogger,MetaInfo::TimeOfDayFormat} and
- \alib{lox::detail::textlogger,MetaInfo::TimeElapsedDays}.

*/


/**
\var ALOX_LOGGERNAME_REPLACEMENTS
Format: <c> ALOX_\<LOGGERNAME\>_REPLACEMENTSFORMAT = ["]search["] , ["]replace["] [,...] </c>

Note that the portion <c>'LOGGERNAME'</c> in the variable name is replaced as documented in
\ref ALOX_LOGGERNAME_FORMAT.

The variable allows to set pairs of search and replace strings for a text logger. Pairs found here,
are set using method \alib{lox::detail::textlogger,TextLogger::SetReplacement}.

Values that start or end with whitespace characters or which contain comma characters (<c>,</c>) ,
need to be enclosed by quotation marks (<c>\"</c>).

*/

/**
\var  ALOX_LOGGERNAME_FORMAT_TIME_DIFF
<em>Default Value</em>: Set to the default values of the class members (fields).<br>

This variable is used and applied in the same way as \ref ALOX_LOGGERNAME_FORMAT, but
defines the following fields:

- \alib{lox::detail::textlogger,MetaInfo::TimeDiffMinimum},
- \alib{lox::detail::textlogger,MetaInfo::TimeDiffNone},
- \alib{lox::detail::textlogger,MetaInfo::TimeDiffNanos},
- \alib{lox::detail::textlogger,MetaInfo::TimeDiffMicros},
- \alib{lox::detail::textlogger,MetaInfo::TimeDiffMillis},
- \alib{lox::detail::textlogger,MetaInfo::TimeDiffSecs},
- \alib{lox::detail::textlogger,MetaInfo::TimeDiffMins},
- \alib{lox::detail::textlogger,MetaInfo::TimeDiffHours} and
- \alib{lox::detail::textlogger,MetaInfo::TimeDiffDays}.
*/

/**
\var  ALOX_LOGGERNAME_FORMAT_MULTILINE
<em>Default Value</em>: Set to the default values of the class members (fields).<br>

This variable is used and applied in the same way as \ref ALOX_LOGGERNAME_FORMAT, but
defines the following fields:

- \alib{lox::detail::textlogger,TextLogger::MultiLineMsgMode},
- \alib{lox::detail::textlogger,TextLogger::FmtMultiLineMsgHeadline},
- \alib{lox::detail::textlogger,TextLogger::FmtMultiLinePrefix},
- \alib{lox::detail::textlogger,TextLogger::FmtMultiLineSuffix} and
- \alib{lox::detail::textlogger,TextLogger::MultiLineDelimiter}.

*/

/**
\var  ALOX_LOXNAME_DOMAIN_SUBSTITUTION
<em>Default Value</em>: none.<br>
This variable is used to define <em>Domain Substitution Rules</em> for a \b %Lox.
The portion <c>'LOXNAME'</c> of the variable name has to be replaced by the name of the instance
of class \b %Lox in question.

Format: <c> ALOX_\<LOXNAME\>_DOMAIN_SUBSTITUTION = [*]domainpath[*] -> replacement [ ; &hellip; ] </c>

Details are described in \ref alox_man_domain_substitution_config "Substitution Rules and External Configuration".

*/

/**
\var  ALOX_GLOBAL_SOURCE_PATH_TRIM_RULES
<em>Default Value</em>: \c "" (empty string).<br>

This variable is used to define global <em>Source Path Trim Rules</em>.

Format: <c> ALOX_GLOBAL_SOURCE_PATH_TRIM_RULES = [*]sourcepath [, inclusion, trimoffset, sensitivity, replacement] [ ; &hellip; ] </c>

Details are described in \ref alox_man_trim_source_path_set_config "External Configuration of Trim Rules".
*/

/**
\var  ALOX_LOXNAME_SOURCE_PATH_TRIM_RULES
<em>Default Value</em>: \c "" (empty string).<br>

This variable is used to define <b>%Lox</b>-specific <em>Source Path Trim Rules</em>.
The portion <c>'LOXNAME'</c> of the variable name has to be replaced by the name of the instance of
class \b %Lox in question.

Format: <c> ALOX_\<LOXNAME\>_SOURCE_PATH_TRIM_RULES = [*]sourcepath [, inclusion, trimoffset, sensitivity, replacement] [ ; &hellip; ] </c>

Details are described in \ref alox_man_trim_source_path_set_config "External Configuration of Trim Rules".
*/

/**
\var  ALOX_LOXNAME_LOGGERNAME_VERBOSITY
<em>Default Value</em>: \c "writeback" (empty string).<br>

This variable is used to set \e Verbosities for a \e %Logger attached to an instance of class <b>%Lox</b>.
The portions <c>'LOXNAME'</c> and <c>'LOGGERNAME'</c> of the variable name have to be replaced by
the names of the instances of \b %Lox and \b %Logger in question.

Format: <c> ALOX_\<LOXNAME\>_\<LOGGERNAME\>_VERBOSITY = [ writeback [ VAR_NAME ] ; ]   [*]domainpath[*] = verbosity [ ; &hellip; ] </c>

Details are described in \ref alox_man_external_verbosity_configuration "External Verbosity Configuration".
*/

/**
\var  ALOX_LOXNAME_PREFIXES
<em>Default Value</em>: \c "" (empty string).<br>

This variable is used to define <b>%Lox</b> and <em>Log Domain</em> specific <em>Prefix Logables</em>
(strings only). The portion <c>'LOXNAME'</c> of the variable name has to be replaced by
the name of the instance of class \b %Lox in question.

Format: <c> ALOX_\<LOXNAME\>_PREFIXES = [*]domainpath[*] = prefixstring [, inclusion] [ ; &hellip; ] </c>

The variable value may contain more than one definition, separated by semicolons \b ';'.
Each definition contains of the following parameters:
- \p{domainpath}<br>
  An absolute or relative domain path. When using the optional asterisk characters \b '*',
  a start of a domain path, the end of a domain path or  an arbitrary substring of a domain path can
  also be denoted. This way, more than one <em>Log Domain</em> might be affected.
- \p{prefixstring}<br>
  The <em>Prefix Logable</em> to set. The string is trimmed from whitespaces, unless surrounded
  by quotation marks, \b ". Outer quotation marks are trimmed as well.
- \p{inclusion}<br>
  Can evaluate to the terms <em>Include</em> or <em>Exclude</em>. Can be arbitrarily abbreviated
  (i.e. \b "E" is enough) and is read in case insensitive way. The meaning is the same as parameter
  \p{otherPLs} of method\alib{lox,Lox::SetPrefix(const Box&\,const NString&\,lang::Inclusion)}.
*/


/**
\var  ALOX_LOXNAME_DUMP_STATE_ON_EXIT
<em>Default Value</em>: \c "none, verbosity=info, domain=/ALOX" (empty string).<br>

Used for debugging or for investigation into ALox enabled 3rd party libraries or applications.

\note If you want to prevent such investigation for your software, refer to the documentation of
      module \alib_config to learn how to protect external variables from being set.

Format: <c> ALOX_\<LOXNAME\>_DUMP_STATE_ON_EXIT = arg1 [, arg2][, &hellip; ] </c>

The portion <c>'LOXNAME'</c> of the variable name has to be replaced by
the name of the instance of class \b %Lox in question.

If this variable is defined, class Lox will automatically invoke method \alib{lox,Lox::State}
in the moment a first \e Logger is removed. In most cases this would be the at the end of the process.
(The other cases are: If after a removal of a \e Logger, the same or another \e Logger is added,
then the next removal of a \e Logger will again invoke the method.)

There are two types of arguments possible which can appear in arbitrary order. All argument
identifiers are letter case agnostic.
<br>
<p>
<b>1. State Information Flags:</b><br>
See reference documentation of
\alib{lox,Lox::State} for more information. The identifiers expected in this variables' arguments
are:
ww
<center>Identifier</center>   | <center>Description</center>
- - - - - - - - - - - - -| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 \c None                 | Selects nothing. This identifier overrules all others. If found, nothing is done.
 \c All                  | Selects everything
 \c Basic                | Name of the %Lox and number of log calls
 \c Version              | Library version and thread safeness
 \c Loggers              | Loggers
 \c Domains              | Log domains currently registered
 \c Internaldomains      | Internal domains
 \c Scopedomains         | Scope domains
 \c DSR                  | Domain substitution rules
 \c PrefixLogables       | Prefix logables
 \c Once                 | Log once counters
 \c Logdata              | Log data objects
 \c Threadmappings       | Named threads
 \c SPTR                 | Source path trim rules (<b>C++ and C# only</b>)
 \c Compilationflags     | \alib compilation flags (<b>C++ only</b>)

<br>
<p>
<b>2. Attributes:</b><br>
Two attributes that are affecting the invocation of \alib{lox,Lox::State} can be provided as arguments:

<center>Attribute</center>       | <center>Description</center>
- - - - - - - - - - - - - - - - -| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 \c domain \c = \b DOMAIN_PATH   | Sets a domain path for the \b %Log.State invocation (defaults to \c "").
 \c verbosity \c = \b VERBOSITY  | Sets a verbosity for the \b %Log.State invocation (defaults to \c "Info").

As a sample, take the following external variable:

        ALOX_LOG_DUMP_STATE_ON_EXIT= domain=/DEBUG, verbosity = info,  logdata, scopedomains

When the process terminates (precisely the first \e Logger is removed from the standard debug
\b %Lox instance), then method \alib{lox,Lox::State} is invoked, with
- absolute domain \b '/DEBUG' provided for parameter \p{domain},
- value \c %Verbosity.Info for parameter \p{verbosity} and
- parameter \p{flags} set to <c>( LogData & ScopeDomains )</c>

*/





/**  @}  */
