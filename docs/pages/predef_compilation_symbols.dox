// #################################################################################################
//  Documentation - ALib C++ Library
//
//  Copyright 2013-2019 A-Worx GmbH, Germany
//  Published under 'Boost Software License' (a free software license, see LICENSE.txt)
// #################################################################################################

/**

@defgroup GrpALibCompilerSymbols ALib Compilation Symbols

Symbols (C++ preprocessor macros) listed here, support adding or removing features to \alib when
compiling the library and any code unit that uses \alib.
These symbols must be used <em>only within makefiles or IDE project files to be passed to the
C++ compiler (!) </em> (normally -D option). In other words: they must not be defined or undefined
within the source code that uses \alib.

For most of the symbols, two versions with suffixes <em>_ON</em> and <em>_OFF</em> exists.
These symbols decide about value of a corresponding <em>code selection symbol</em> that is named
the same without the suffix.<br>
If both are set at the same time, a compiler error is generated by \alib header files.
If none of them is passed to the compiler, a default value is assumed.<p>

As a convenience, to get default behavior, no symbol needs to be passed to the compiler.<p>

\attention
  Some of the compilation symbols are changing the definition of classes and methods which
  makes binaries incompatible with binaries that do not use the same setting for each of
  these symbols.<br>
  Symbols that have to be kept equal across compilation units are denoted in this
  documentation.

@{ @}


\~Comment ##################           General              ################################## \~

@addtogroup GrpALibCompilerSymbols
@{
@name General Symbols

\def  ALIB_DEBUG_ON
 This compiler symbol forces \alib to compile in debug mode by defining the code selection symbol
 \ref ALIB_DEBUG. Plausibility and assertion checks are performed in this mode.<br>
 If neither this symbol nor \ref ALIB_DEBUG_OFF is provided, then \alib headers rely on
 the symbol <b>NDEBUG</b>. If NDEBUG is given, \ref ALIB_DEBUG is not set. Otherwise it is.

\def  ALIB_DEBUG_OFF
 This compiler symbol forces \alib to compile without internal plausibility and assertion checks,
 by leaving the code selection symbol \ref ALIB_DEBUG undefined.
 If neither this symbol nor \ref ALIB_DEBUG_OFF is provided, then \alib headers rely on
 a set of standard symbols introduced (and set) by other libraries, e.g. <em>NDEBUG</em>.


\def  ALIB_API_IS_DLL
 This compiler symbol has to be defined when compiling \alib classes into a DLL under
 Windows/MSC.
 Within code units that use a DLL that contains \alib, this symbol must not be defined.

\def  ALIB_API_NO_DLL
 This compiler symbol has to be defined when compiling \alib classes directly into a project
 Windows/MSC (not using a DLL).
 \see #ALIB_API_IS_DLL and #ALIB_API


\def  ALIB_AVOID_ANALYZER_WARNINGS_ON
  This compiler symbol enables additional debug code that tries to prevent external analysis
  tools (e.g. [Valgrind](https://www.valgrind.org/)) to raise unnecessary warnings or errors.

  When provided, it defines \ref ALIB_AVOID_ANALYZER_WARNINGS.


\def  ALIB_AVOID_ANALYZER_WARNINGS_OFF
  Disables certain debug code. See \ref ALIB_AVOID_ANALYZER_WARNINGS_ON.
  This symbol represents the default behavior and is provided for completeness.

\def  ALIB_GDB_PP_SUPPRESS_CHILDREN
  This symbol may be passed to the compiler to control the behavior of pretty printers scripts
  for GDB. If defined, external symbol \e "ALIB_PP_SUPPRESS_CHILDREN"
  is created in debug compilations. This will be detected by pretty printer python script
  provided with \alib/\alox.

  \see Documentation of pretty printers in tools section of \alib documentation.

\def  ALIB_GDB_PP_FIND_POINTER_TYPES
  This symbol may be passed to the compiler to control the behavior of pretty printers scripts
  for GDB. If defined, external symbol \e "ALIB_PP_FIND_POINTER_TYPES"
  is created in debug compilations. This will be detected by pretty printer python script
  provided with \alib/\alox.

  \see Documentation of pretty printers in tools section of \alib documentation.

\def  ALIB_GTEST_ON
  This symbol may be passed to the compiler to define code selection symbol
  \ref ALIB_GTEST which selects unit test code in accordance to the Google Test libraries.

\def ALIB_PRECOMPILED_HEADER_DISABLED
  Compiler symbol that can be passed to disable inclusions in header file
  \ref alib/alib_precompile.hpp.

@}
@}


\~Comment ################           Module Selection          ############################# \~


@addtogroup GrpALibCompilerSymbols
@{

@name ALib Selection Of Modules

This group of symbols determine the inclusion of different <b>%ALib Modules</b> in the
\alibdist.
The symbols are evaluated in header <c>alib/lib/precomp_modules.hpp</c> which always is and has to
be the first header file included (directly or indirectly) with \alib sources.

A corresponding version using postfix <b>_OFF</b> is available. However, those are only available
for completeness, because they just denote the default behaviour. The <b>_OFF</b>-version of the
symbols are not listed here.

If non of the modules is selected (aka, non of the symbols are passed to the compiler), then
\b all modules are included in the built.

For each compiler symbol, a corresponding \ref GrpALibCodeSelectorSymbols "code selection symbol"
with the same name, but excluding postfix <b>_ON</b> will be defined and such evaluate to either
\b 0 or \b 1.
Module dependencies are automatically resolved.
If for example \b ALIB_MODULE_ALOX_ON is given, besides code selection symbol
\ref ALIB_MODULE_ALOX, all corresponding symbols of dependency modules are resolved to value \c 1.


\def  ALIB_MODULE_ALOX_ON
  Denotes if module \alibmod_alox is to  be in the \alibdist.

\def  ALIB_MODULE_EXPRESSIONS_ON
  Denotes if module \alibmod_expressions is to  be in the \alibdist.

\def  ALIB_MODULE_CONFIGURATION_ON
  Denotes if module \alibmod_config is to  be in the \alibdist.

\def  ALIB_MODULE_CLI_ON
  Denotes if module \alibmod_cli is to  be in the \alibdist.

\def  ALIB_MODULE_SYSTEM_ON
  Denotes if module \alibmod_system is to  be in the \alibdist.

\def  ALIB_MODULE_RESULTS_ON
  Denotes if module \alibmod_results is to  be in the \alibdist.

\def  ALIB_MODULE_STRINGFORMAT_ON
  Denotes if module \alibmod_stringformat is to  be in the \alibdist.

\def  ALIB_MODULE_BOXING_ON
  Denotes if module \alibmod_boxing is to  be in the \alibdist.

\def  ALIB_MODULE_ENUMS_ON
  Denotes if module \alibmod_enums is to  be in the \alibdist.

\def  ALIB_MODULE_RESOURCES_ON
  Denotes if module \alibmod_resources is to  be in the \alibdist.

\def  ALIB_MODULE_THREADS_ON
  Denotes if module \alibmod_threads is to  be in the \alibdist.

\def  ALIB_MODULE_STRINGS_ON
  Denotes if module \alibmod_strings is to  be in the \alibdist.

\def  ALIB_MODULE_MEMORY_ON
  Denotes if module \alibmod_memory is to  be in the \alibdist.

\def  ALIB_MODULE_CHARACTERS_ON
  Denotes if module \alibmod_characters is to  be in the \alibdist.

\def  ALIB_MODULE_TIME_ON
  Denotes if module \alibmod_time is to  be in the \alibdist.

\def  ALIB_MODULE_SINGLETONS_ON
  Denotes if module \alibmod_singletons is to  be in the \alibdist.

@}
@}



\~Comment ##################              MEMORY               ############################### \~

@addtogroup GrpALibCompilerSymbols
@{
@name ALib Module Memory

\def  ALIB_MEMORY_DEBUG_ON
  Compiler symbol to enable code selection symbol \ref ALIB_MEMORY_DEBUG.

\def  ALIB_MEMORY_DEBUG_OFF
  Compiler symbol to disable code selection symbol \ref ALIB_MEMORY_DEBUG.

@}
@}


\~Comment ##################              Singleton               ############################### \~

@addtogroup GrpALibCompilerSymbols
@{

@name ALib Module Singletons

\def  ALIB_FEAT_SINGLETON_MAPPED_OFF
  This symbol may be passed to the compiler to define code selection symbol
  \ref ALIB_FEAT_SINGLETON_MAPPED to be \c 0 and this way overwrite the default setting.

  See \ref ALIB_FEAT_SINGLETON_MAPPED for more information.


\def  ALIB_FEAT_SINGLETON_MAPPED_ON
  This symbol may be passed to the compiler to define code selection symbol
  \ref ALIB_FEAT_SINGLETON_MAPPED to be \c 1 and this way overwrite the default setting.

  See \ref ALIB_FEAT_SINGLETON_MAPPED for more information.
@}
@}




\~Comment ##################              Boxing               ################################## \~

@addtogroup GrpALibCompilerSymbols
@{

@name ALib Module Boxing

 \def  ALIB_FEAT_BOXING_NON_BIJECTIVE_INTEGRALS_OFF
   This symbol may be passed to the compiler to define code selection symbol
   \ref ALIB_FEAT_BOXING_NON_BIJECTIVE_INTEGRALS to be \c 0.

   See \ref ALIB_FEAT_BOXING_NON_BIJECTIVE_INTEGRALS for more information.

 \def  ALIB_FEAT_BOXING_NON_BIJECTIVE_INTEGRALS_ON
   This symbol may be passed to the compiler to define code selection symbol
   \ref ALIB_FEAT_BOXING_NON_BIJECTIVE_INTEGRALS to be \c 1.
   However, as this is the default value, this symbol does not need to defined.

   See \ref ALIB_FEAT_BOXING_NON_BIJECTIVE_INTEGRALS for more information.


 \def  ALIB_FEAT_BOXING_NON_BIJECTIVE_CHARACTERS_OFF
   This symbol may be passed to the compiler to define code selection symbol
   \ref ALIB_FEAT_BOXING_NON_BIJECTIVE_CHARACTERS to be \c 0.

   See \ref ALIB_FEAT_BOXING_NON_BIJECTIVE_CHARACTERS for more information.

 \def  ALIB_FEAT_BOXING_NON_BIJECTIVE_CHARACTERS_ON
   This symbol may be passed to the compiler to define code selection symbol
   \ref ALIB_FEAT_BOXING_NON_BIJECTIVE_CHARACTERS to be \c 1.
   However, as this is the default value, this symbol does not need to defined.

   See \ref ALIB_FEAT_BOXING_NON_BIJECTIVE_CHARACTERS for more information.


 \def  ALIB_FEAT_BOXING_NON_BIJECTIVE_FLOATS_OFF
   This symbol may be passed to the compiler to define code selection symbol
   \ref ALIB_FEAT_BOXING_NON_BIJECTIVE_FLOATS to be \c 0.

   See \ref ALIB_FEAT_BOXING_NON_BIJECTIVE_FLOATS for more information.


 \def  ALIB_FEAT_BOXING_NON_BIJECTIVE_FLOATS_ON
   This symbol may be passed to the compiler to define code selection symbol
   \ref ALIB_FEAT_BOXING_NON_BIJECTIVE_FLOATS to be \c 1.
   However, as this is the default value, this symbol does not need to defined.

   See \ref ALIB_FEAT_BOXING_NON_BIJECTIVE_FLOATS for more information.

@}
@}


\~Comment ##################              Characters              ################################## \~

@addtogroup GrpALibCompilerSymbols
@{

@name ALib Module Characters

\def  ALIB_CHARACTERS_FORCE_NARROW_ON
  This compiler symbol forces the use of narrow strings (character type \c nchar) as the default
  string type of the \alib library by setting code selector symbol \ref ALIB_CHARACTERS_ARE_NARROW to \c 1.<br>
  While still both string types are available, all neutral string alias types will use single
  byte characters.

  If neither this macro nor \ref ALIB_CHARACTERS_FORCE_WIDE_ON is given, the choice of default
  character type is system dependent: On Windows OS, wide characters strings are chosen, while
  on Unix-like OSes, narrow character strings are used by default.<br>
  In the case that both are given, a preprocessor "#error" will be raised.

  \see
    - Sibling symbol \ref ALIB_CHARACTERS_FORCE_WIDE_ON.
    - Chapter \ref alib_characters_chars "2. Character Types" of the Programmer's Manual
      of module \alibmod_characters.


\def  ALIB_CHARACTERS_FORCE_NARROW_OFF
  This compiler symbol is provided for completeness only. It has no effect when given as
  it keeps the platform-dependent default behaviour.<br>
  The only effect is, that in the case it passed to the compiler together with its sibling
  symbol \ref ALIB_CHARACTERS_FORCE_NARROW_ON, a compilation error will be given.

\def  ALIB_CHARACTERS_FORCE_WIDE_ON
  This compiler symbol forces the use of wide strings (character type \c wchar_t) as the default
  string type of the \alib library by setting code selector symbol \ref ALIB_CHARACTERS_ARE_NARROW to \c 0.<br>
  While still both string types are available, all neutral string alias types will use wide
  characters.

  \see
    - Sibling symbol \ref ALIB_CHARACTERS_FORCE_NARROW_ON
    - Resulting code selection symbol \ref ALIB_CHARACTERS_ARE_NARROW
    - Chapter \ref alib_characters_chars "2. Character Types" of the Programmer's Manual
       of module \alibmod_characters.

\def  ALIB_CHARACTERS_FORCE_WIDE_OFF
  This compiler symbol is provided for completeness only. It has no effect when given as
  it keeps the platform-dependent default behaviour.<br>
  The only effect is, that in the case it passed to the compiler together with its sibling
  symbol \ref ALIB_CHARACTERS_FORCE_WIDE_ON, a compilation error will be given.


\def  ALIB_CHARACTERS_FORCE_WIDE_2_BYTES_ON
  If this compiler symbol is given, then type \alib{characters,wchar} will be \b 2 bytes wide,
  independent from the width of \c wchar_t, which is compiler dependent.<br>
  Precisely, \b wchar will be equivalent to type \c wchar_t with compilers that define
  the latter as a \b 2-byte integral value and equivalent to type \c char16_t, if \c wchar_t is a
  \b 4-byte integral.

  This symbol must not be used together with symbols \ref ALIB_CHARACTERS_FORCE_WIDE_4_BYTES_ON
  and \ref ALIB_CHARACTERS_FORCE_WIDE_2_BYTES_OFF.


\def  ALIB_CHARACTERS_FORCE_WIDE_4_BYTES_ON
  If this compiler symbol is given, then type \alib{characters,wchar} will be \b 4 bytes wide,
  independent from the width of \c wchar_t, which is compiler dependent.<br>
  Precisely, \b wchar will be equivalent to type \c wchar_t with compilers that define
  the latter as a \b 4-byte integral value and equivalent to type \c char32_t, if \c wchar_t is a
  \b 2-byte integral.

  This symbol must not be used together with symbols \ref ALIB_CHARACTERS_FORCE_WIDE_2_BYTES_ON
  and \ref ALIB_CHARACTERS_FORCE_WIDE_4_BYTES_OFF.

\def  ALIB_CHARACTERS_FORCE_WIDE_2_BYTES_OFF
  This compiler symbol is provided for completeness only. It has no effect when given as
  it keeps the platform-dependent default behaviour.<br>
  The only effect is, that in the case it passed to the compiler together with its sibling
  symbol \ref ALIB_CHARACTERS_FORCE_WIDE_2_BYTES_ON, a compilation error will be given.

\def  ALIB_CHARACTERS_FORCE_WIDE_4_BYTES_OFF
  This compiler symbol is provided for completeness only. It has no effect when given as
  it keeps the platform-dependent default behaviour.<br>
  The only effect is, that in the case it passed to the compiler together with its sibling
  symbol \ref ALIB_CHARACTERS_FORCE_WIDE_4_BYTES_ON, a compilation error will be given.

@}
@}


\~Comment ##################              Strings              ################################## \~

@addtogroup GrpALibCompilerSymbols
@{

@name ALib Module Strings Feature Selection

\def  ALIB_FEAT_BOOST_REGEX_ON
  This compiler symbol enables the use of string utility class \alib{strings::util,RegexMatcher}
  by defining source selection symbol \ref ALIB_FEAT_BOOST_REGEX.
  Class \b %RegexMatcher is in fact only a simple wrapper around external
  [boost::regex library](http://www.boost.org).

  If this symbol is not explicitly given to the compiler, \ref ALIB_FEAT_BOOST_REGEX remains
  undefined, the \b %boost library is not included and class \b %RegexMatcher is not available.

\def  ALIB_FEAT_BOOST_REGEX_OFF
  This compiler symbol disables the definition of source selection symbol
  \ref ALIB_FEAT_BOOST_REGEX.

  This is the default, hence the symbol is not needed to be passed, but it is available for
  completeness.<br>

\def  ALIB_STRINGS_DEBUG_ON
  This compiler symbol enables additional debug code within class AString. When provided,
  it defines \ref ALIB_STRINGS_DEBUG to \c true. This is useful when extending or specifically
  debugging class AString.


\def  ALIB_STRINGS_DEBUG_OFF
  Disables certain debug code within class AString. See \ref ALIB_STRINGS_DEBUG_ON.
  This symbol represents the default behavior and is provided for completeness.

@}
@}



\~Comment ##################              ALOX                ################################## \~

@addtogroup GrpALibCompilerSymbols
@{

@name ALox Feature Selection

\def  ALOX_DBG_LOG_ON
  Explicitly enables debug logging by defining the code selection symbol \ref ALOX_DBG_LOG.

  Must not be used in conjunction with \ref ALOX_DBG_LOG_OFF.

  If neither <b>ALOX_DBG_LOG_ON</b> nor <b>ALOX_DBG_LOG_OFF</b> are specified, \alox will determine the
  inclusion of debug <em>Log Statements</em> by evaluating macro #ALIB_DEBUG.
  If ALIB_DEBUG is set, ALOX_DBG_LOG will also be set.


\def  ALOX_DBG_LOG_OFF
  Explicitly disables debug logging by leaving the code selection symbol \ref ALOX_DBG_LOG undefined.
  Any debug <em>Log Statements</em> that are embedded in code by using the
  \ref GrpALibMacros_mod_alox_debug "debug logging macros" will get pruned.

  Must not be used in conjunction with \ref ALOX_DBG_LOG_ON.

  If neither <b>ALOX_DBG_LOG_ON</b> nor <b>ALOX_DBG_LOG_OFF</b> are specified, \alox will determine the
  inclusion of debug <em>Log Statements</em> by evaluating macro #ALIB_DEBUG.
  If ALIB_DEBUG is set, ALOX_DBG_LOG will also be set.

\def  ALOX_REL_LOG_ON
  Explicitly enables release logging by defining the code selection symbol \ref ALOX_REL_LOG.

  Must not be used in conjunction with \ref ALOX_REL_LOG_OFF.

  If neither <b>ALOX_REL_LOG_ON</b> nor <b>ALOX_REL_LOG_OFF</b> are specified, release logging
  implemented by \alox release log macros is enabled. Therefore, this symbol is provided only for
  completeness. There is no real need to pass it to the compiler.

  Remember, that any release logging that is not implemented using the \alox release logging macros,
  but instead using the \alox classes in the source code directly, is not affected by this
  macro.

\def  ALOX_REL_LOG_OFF
  Explicitly disables release logging by leaving the code selection symbol \ref ALOX_REL_LOG
  undefined.
  Any release <em>Log Statements</em> that are embedded in code by using
  \ref GrpALibMacros_mod_alox_release "release logging macros" will get pruned.

  Must not be used in conjunction with \ref ALOX_REL_LOG_ON.

  If neither <b>ALOX_REL_LOG_ON</b> nor <b>ALOX_REL_LOG_OFF</b> are specified, release logging
  implemented by \alox release log macros is enabled. Therefore, this symbol is provided only for
  completeness. There is no real need to pass it to the compiler.

  Remember, that any release logging that is not implemented using the \alox release logging macros,
  but instead using the \alox classes in the source code directly, is not affected by this
  macro.

\def  ALOX_DBG_LOG_CI_ON
  Explicitly enables the generation of scope information using the built-in preprocessor
  macros like "__FILE__" and "__LINE__" for \alox debug logging statements

  Passing this Symbol to the compiler, makes \alox define the code selection symbol
  \ref ALOX_DBG_LOG_CI.
  Must not be used in conjunction with \ref ALOX_DBG_LOG_CI_OFF.

  If neither <b>ALOX_DBG_LOG_CI_ON</b> nor <b>ALOX_DBG_LOG_CIO_OFF</b> are specified, \alox will enable
  caller source information for debug logging. In other words, <b>ALOX_DBG_LOG_CI_ON</b> is the
  default and passing the symbol to the compiler is not mandatory.

  \note The \alox <em>Scope Domain</em> mechanism as well as the ALox features \e Lox.Once and
  <em>Log Data</em> rely on caller information.
  These mechanisms are therefore not available to debug logging unless this symbol is set.

\def  ALOX_DBG_LOG_CI_OFF
  Disables the generation of scope information using the built-in preprocessor
  macros like "__FILE__" and "__LINE__" for \alox debug logging statements

  Passing this Symbol to the compiler, makes \alox to leave the code selection symbol
  \ref ALOX_DBG_LOG_CI undefined.<br>
  Must not be used in conjunction with \ref ALOX_DBG_LOG_CI_ON.

  If neither <b>ALOX_DBG_LOG_CI_ON</b> nor <b>ALOX_DBG_LOG_CIO_OFF</b> are specified, then
  \ref ALOX_DBG_LOG_CI_ON is the default.

  \note The \alox Scope Domain mechanism as well as the ALox features \e Lox.Once and
  <em>Log Data</em> rely on caller information.
  These mechanisms are therefore not available to debug logging when this symbol is set.


\def  ALOX_REL_LOG_CI_ON
  Explicitly enables the generation of scope information using the built-in preprocessor
  macros like "__FILE__" and "__LINE__" for \alox release logging statements

  Passing this Symbol to the compiler, makes \alox define the code selection symbol
  \ref ALOX_REL_LOG_CI.<br>
  Must not be used in conjunction with \ref ALOX_REL_LOG_CI_OFF.

  If neither <b>ALOX_REL_LOG_CI_ON</b> nor <b>ALOX_REL_LOG_CIO_OFF</b> are specified, \alox will disable
  caller source information for release logging.

  Enabling source info for for release logging is seldom wanted. Release executables should
  not generate log output that an end user is not able to understand.
  It can make sense however, if release log information from the field goes back to the
  software development team.
  Furthermore, it can be very helpful to enable scope information for release <em>Log Statements</em>
  in the debug version of a compilation unit.

  \note The \alox <em>Scope Domain</em> mechanism as well as the ALox features \e Lox.Once and
  <em>Log Data</em> rely on caller information.
  These mechanisms are therefore not available to debug logging unless this symbol is set.


\def  ALOX_REL_LOG_CI_OFF
  Disables the generation of scope information using the built-in preprocessor
  macros like "__FILE__" and "__LINE__" for \alox release logging statements

  Passing this Symbol to the compiler, makes \alox to leave the code selection symbol
  \ref ALOX_REL_LOG_CI undefined.<br>
  Must not be used in conjunction with \ref ALOX_REL_LOG_CI_ON.
  If neither <b>ALOX_REL_LOG_CI_ON</b> nor <b>ALOX_REL_LOG_CIO_OFF</b> are specified, then
  \ref ALOX_REL_LOG_CI_OFF is the default.  In other words: passing the symbol to the
  compiler is not mandatory.

  \note The \alox <em>Scope Domain</em> mechanism as well as the ALox features \e Lox.Once and
  <em>Log Data</em> rely on caller information.
 These mechanisms are therefore not available to release logging unless
  \ref ALOX_REL_LOG_CI_ON is set.

@}
@}


\~Comment ##################            Expressions           ################################## \~


@addtogroup GrpALibCompilerSymbols
@{

@name ALib Expressions Feature Selection

\def  ALIB_FEAT_EXPRESSIONS_SPIRIT_PARSER_ON
  This compiler symbol enables the use of alternative an an alternative parser for
  module \alibmod_expressions based on
  [boost::spirit](http://www.boost.org/doc/libs/1_66_0/libs/spirit/doc/html/index.html).

  Note that setting this flag does not only choose to compile the \c boost::spirit based
  parser, but also choose to use it by default.

  \attention
    This is an experimental feature only. Some features of this library will be silently (!)
    lost with its activation.
    It is discouraged to use the \c boost::spirit parser in combination with this library in
    production environments!

  \attention
    Please read the according \ref alib_expressions_appendix_boostspirit "manual section"
    for more information on the use of the \c boost::spirit parser.


\~Comment #################################################################################### \~
\def  ALIB_FEAT_EXPRESSIONS_SPIRIT_PARSER_OFF
  This compiler symbol disables the use of an alternative parser for module \alibmod_expressions based
  on [boost::spirit](http://www.boost.org/doc/libs/1_66_0/libs/spirit/doc/html/index.html).

  This is the default, hence the symbol is not needed to be passed, but it is available for
  completeness.<br>

  See \ref ALIB_FEAT_EXPRESSIONS_SPIRIT_PARSER_ON and the according
  \ref alib_expressions_appendix_boostspirit "manual section" for more information on the use
  of the \c boost::spirit parser.


@}
@}





*/


