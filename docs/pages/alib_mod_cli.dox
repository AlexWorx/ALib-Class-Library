// #################################################################################################
//  Documentation - ALib C++ Library
//
//  Copyright 2013-2019 A-Worx GmbH, Germany
//  Published under 'Boost Software License' (a free software license, see LICENSE.txt)
// #################################################################################################

/**
\page alib_mod_cli   ALib Module CLI - Programmer's Manual


\tableofcontents

\attention
  Unfortunately, this \alibmod is not completed and is more or less in an alpha version state.
  You might want to wait for a next library release to see this fixed!<br>
  And the situation is even worse for this Programmer's Manual: <b>It is just not written, yet!</b><br>

\attention
  ... apart from a few words!




\~Comment ####################################################################################### \~
# 1. Introduction # {#alib_cli_intro}

This \alibmod supports the processing of command line parameters.
Such processing is not only useful with "pure CLI commands" but also with software that only
optionally receive arguments, may it be daemons or GUI applications.

The processing of command line parameters is very much dependent on the field of application and the
parameter and option "syntax" that needs to be supported.
Therefore, by definition, helper classes like this can never support each and every use case and
any unforeseen tweak a user want to implement. (At least we were not able to implement it that
way.)

Therefore, the software found in this module:
- Uses an open, pragmatic code style. For example, fields are mostly public and the interface
  methods allow data modifications between the several steps of their invocation.

- Is incomplete and even partly inconsistent in respect to what can be defined as commands,
  parameters, etc. and what action can be "automated" with the information provided.

This means, that using the module provides a guideline on how to implement the CLI processing,
but not a full-featured CLI processor that just needs some custom callback functions.
Positively spoken: The implementable syntax of the CLI interface is completely open
and not limited when this module is used.

\~Comment ####################################################################################### \~
## 1.1 ALib Enum Records And ALib Resources # {#alib_cli_intro_enum_records}
The classes found in this namespace make a lot of use of
\ref alib_enums_records "ALib Enum Records" retrieved from an instance of type
\alib{resources,ResourcePool}, usually the one found in the singleton of the associated \alib{Module}.

Therefore, it is a good advice to get familiar with the features provided by module
\alib_resources before using this class.

\~Comment ####################################################################################### \~
# 2. Defining Commands, Parameters, Options and ExitCodes # {#alib_cli_defines}
Objects of the structs
\alib{cli,CommandDecl},
\alib{cli,ParameterDecl},
\alib{cli,OptionDecl} and
\alib{cli,ExitCodeDecl},
are all defined using resourced \ref alib_enums_records "ALib Enum Records" demanding a specific
record type to be associated to a custom enumeration.

In addition, a custom enum types need to have a specialization of \alib{resources,T_Resourced},
which is used to load further resource strings.

The following table summarizes the types,
the necessary <em>ALib Enum Record</em> type and
the additional resource strings that need to be available:

|Object Type               | Record Type To Use          | Additional Resource Strings
|--------------------------|---------------------------|-----------------------------------------------------
|\alib{cli,CommandDecl}    | \alib{cli,ERCommandDecl}  |  <b>"THlpCmdSht_NN"</b>: Short version of help text for each parameter.<br><b>"THlpCmdLng_NN"</b>: Long version of help text for each parameter
|\alib{cli,ParameterDecl}  | \alib{cli,ERParameterDecl}| <b>"THlpParSht_NN"</b>: Short version of help text for each parameter.<br><b>"THlpParLng_NN"</b>: Long version of help text for each parameter.
|\alib{cli,OptionDecl}     | \alib{cli,EROptionDecl}   | <b>"TOptUsg_NN"</b>: Help text for each option describing its usage.<br><b>"TOptHlp_NN"</b>: Help text for each Option.
|\alib{cli,ExitCodeDecl}   | \alib{cli,ERExitCodeDecl} | <b>"TExit_NN"</b>: A format string returned by method \alib{cli,ExitCodeDecl::FormatString}-

\~Comment ####################################################################################### \~
# 3. Allowing Other Parts Of The Software To Access CLI Arguments # {#alib_cli_arg_sharing}

This class uses its own copy of the argument list and exposes the original arguments with fields
\alib{cli::CLIApp,ArgcOriginal},
\alib{cli::CLIApp,ArgNOriginal} and
\alib{cli::CLIApp,ArgWOriginal}, so that other parts of the software have full access to the CLI.
In addition, this class exposes field \alib{cli::CLIApp,OptionArgsIgnored},
that hold all CLI arguments that start with a hyphen <c>'-'</c> and are not recognized
by \alib{cli,OptionDecl}. A software might use this shortened list to look for options.

With the use of module \alib_config such use of CLI arguments outside of this module already
occurs: \alib{config,Variable,Configuration variables} can be defined using CLI parameters
the same as by using environment variables, configuration files or other data sources.
And such use should still be possible, independent from the CLI interface.

The other way round, arguments may be removed from the internal list held by this class, prior
to have this class processing the arguments. Note that this is a must for  arguments that do not
start with a hyphen (and are addressing other software parts), because such arguments would
lead to "unknown command" errors.
Such removal has to be done after the invocations of the various \b %Define methods and prior
to invoking \alib{cli,CLIApp::ReadOptions}.

*/


