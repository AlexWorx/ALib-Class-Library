// #################################################################################################
//  Documentation - ALox Logging Library
//
//  Copyright 2013-2018 A-Worx GmbH, Germany
//  Published under 'Boost Software License' (a free software license, see LICENSE.txt)
// #################################################################################################

/**
\page alib_man_intro    Introduction


 \~Comment ####################################################################################### \~
# Organization of Code #

While \alib is maintained and developed as one single library, different parts of it can be
extracted and used independently from the rest. For this, \alib is divided into so called "modules".

\note
    The term module relates to the upcoming C++ language standard, which is supposed to support a
    concept of modules some day. Today, this upcoming standard is not technically used.

### List of Modules: ###
As of today, the modules of \alib are:
\ref aworx::lib::lang::Singleton "Singleton",
\ref aworx::lib::boxing          "Boxing",
\ref aworx::lib::strings         "Strings",
\ref alib_man_module_core        "Core",
\ref aworx::lib::config          "Configuration",
\ref aworx::lib::lox             "ALox",
\ref aworx::lib::expressions     "Expressions" and
\ref aworx::lib::cli             "CLI".


Modularization is not always 100% possible (or the effort is sometimes not worth the cost).
Therefore, some of the basic, core classes can not be well assigned to a single
\alibmod_nolink and hence got collected in special module \alibmod_core.<br>
Namespaces that provide core types are:
\ref aworx::lib::lang    "lang",
\ref aworx::lib::threads "threads",
\ref aworx::lib::time    "time",
\ref aworx::lib::util    "util",
\ref aworx::lib::system  "system" and
\ref aworx::lib::debug   "debug".

 \~Comment ####################################################################################### \~
# Platforms/Toolchains #
As of today, <b>%ALib for C++</b> is compiled and tested under the following platforms and
compiler toolchains:
- GNU/Linux, GNU C++ 11, 32-Bit / 64-Bit
- GNU/Linux, Clang C++ 11, 32-Bit / 64-Bit
- Windows 10, Microsoft Compiler (MSVC) C++11, 32-Bit / 64-Bit
- macOS 10, 64-Bit

Adoptions to other platforms should be implementable with limited efforts. All relevant
code which selects platform/toolchain specific libraries, intrinsics, etc., will expose a
preprocessor error if section fails due to unknown environment.
This allows to quickly insert the right platform/toolchain specific code at these places.

<b>The C++ compiler warning level is defaulted to the bearable maximum.</b> This means, that the
inclusion of \alib headers into a project's compilation process should never lead to compilation
warnings or errors when custom warning levels (of your project) are used.

 \~Comment ####################################################################################### \~
# Source Selection / Project Setup #

While project files for different IDEs might be provided, the main development of \alib is
performed using [CMake](https://cmake.org/) scripts.
The relationship of source file and \alibmod_nolink selection is <b>"officially defined"</b>
by a CMake script file.

Hence, for users of other build systems and IDEs, this CMake file is the reference for
selecting the source files to include.

This and more is described in detail in \ref alib_man_setup.

\note Even for non-experienced users (in respect to CMake), the syntax of the file will be easily
      understood.

 \~Comment ####################################################################################### \~
# Runtime Bootstrapping #
The library needs to be initialized during the the bootstrap of the using process (respectively
before its first use). The organization of the initialization is realized with class
\alib{lang,Library}. Each \alibmod provides a static singleton of a descendant implementation of
this type located in namespace #aworx::lib. In addition, singleton #aworx::lib::ALIB
exists, which adds all other singletons as dependencies.

Therefore, it is enough to invoke \alib{lang,Library::Init} on singleton #aworx::lib::ALIB on
bootstrap.

 \~Comment ####################################################################################### \~
# Unit Tests #
An extensive set of unit tests is included in the distribution.


 \~Comment ####################################################################################### \~
# Where To Start#
Most of the time, a 3rd party library like \alib is used to help solving a certain task. Such
tasks are addressed with higher level modules, like \alibmod_alox, \alibmod_cli or \alibmod_expressions.
In this case, the corresponding module documentation should be read directly, without loosing time
on learning too much about the lower level modules and types.

If you find the lower level types useful for your own projects, those will be understood over
time and by reading the reference documentation of types found in namespaces like
\ref aworx::lib::lang    "lang",
\ref aworx::lib::boxing  "boxing",
\ref aworx::lib::strings "strings",
\ref aworx::lib::util    "util",
\ref aworx::lib::system  "system",
\ref aworx::lib::threads "threads" and
\ref aworx::lib::time    "time".

Should you really just be interested in general and therefore absolutely not knowing where to start
reading, we recommend to start with either \alibmod_boxing or with the
[tutorial of logging library ALox](http://alexworx.github.io/ALox-Logging-Library/cpp_ref/alox_cpp_tutorial.html).

The next chapter provides an \ref alib_man_modules "overview on the different ALib modules".
*/


