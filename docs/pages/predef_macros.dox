// #################################################################################################
//  Documentation - ALib C++ Library
//
//  Copyright 2013-2019 A-Worx GmbH, Germany
//  Published under 'Boost Software License' (a free software license, see LICENSE.txt)
// #################################################################################################

#define ALIB_VERSION
#define ALIB_REVISION
#define ALIB_COMPILATION_FLAGS

#define ALIB_STRINGIFY(a)
#define ALIB_NSTRINGIFY(a)
#define ALIB_CONCAT(a,b)
#define ALIB_IDENTIFIER(prefix)
#define ALIB_EMPTY
#define ALIB_COMMA
#define ALIB_COMMA_DBG
#define ALIB_STATIC_ASSERT
#define ALIB_STATIC_DENY

#define ALIB_API
#define ALIB_NO_RETURN
#define ALIB_SIZEOF_WCHAR_T
#define ALIB_CPP14_CONSTEXPR
#define ALIB_CPP14_REL_CONSTEXPR
#define ALIB_REL_CONSTEXPR
#define ALIB_CALLER
#define ALIB_CALLER_PRUNED
#define ALIB_CALLER_NULLED

#define ALIB_WARNINGS_RESTORE
#define ALIB_WARNINGS_UNINITIALIZED_OFF
#define ALIB_WARNINGS_MACRO_NOT_USED_OFF
#define ALIB_WARNINGS_ALLOW_MACRO_REDEFINITION
#define ALIB_WARNINGS_OVERLOAD_VIRTUAL_OFF
#define ALIB_WARNINGS_ALLOW_SPARSE_ENUM_SWITCH
#define ALIB_WARNINGS_ALLOW_BITWISE_SWITCH
#define ALIB_WARNINGS_IGNORE_DOCS
#define ALIB_WARNINGS_IGNORE_UNUSED_PARAMETER
#define ALIB_FALLTHROUGH

#define ALIB_ERROR(...)
#define ALIB_WARNING(...)
#define ALIB_MESSAGE(...)
#define ALIB_ASSERT(cond, ...)
#define ALIB_ASSERT_ERROR(cond, ...)
#define ALIB_ASSERT_WARNING(cond, ...)
#define ALIB_ASSERT_MESSAGE(cond, ...)
#define ALIB_ASSERT_RESULT_EQUALS(func, value)
#define ALIB_ASSERT_RESULT_NOT_EQUALS(func, value)
#define ALIB_ASSERT_RESULT_GREATER_THAN(func, value)
#define ALIB_ASSERT_RESULT_LESS_THAN(func, value)


#define ATMP_IS_ENUM( T       )
#define ATMP_IS_PTR( T        )
#define ATMP_IS_ARR( T        )
#define ATMP_EQ(    Tlhs, Trhs)
#define ATMP_ISOF(   T, TBase )

#define ATMP_RC(     T        )
#define ATMP_RCV(    T        )
#define ATMP_RCVR(   T        )
#define ATMP_RR(     T        )
#define ATMP_RP(     T        )
#define ATMP_RE(     T        )
#define ATMP_RCVP(   T        )
#define ATMP_RECVP(   T       )

#define ATMP_VOID_IF( Cond       )
#define ATMP_T_IF( T, Cond       )
#define ATMP_IF_T_F(  Cond, T, F )

#define ATMP_SELECT_IF_1TP(TParam,...)
#define ATMP_SELECT_IF_2TP(TParam1,TParam2,...)
#define ATMP_SELECT_IF_3TP(TParam1,TParam2,TParam3,...)
#define ATMP_SELECT_IF_4TP(TParam1, TParam2, TParam3, TParam4, ... )
#define ATMP_RETURN_IF_1TP(TReturn, TParam, ... )
#define ATMP_RETURN_IF_2TP(TReturn, TParam1, TParam2, ... )

#define ALIB_OWN(ownable)
#define ALIB_LOCK
#define ALIB_LOCK_WITH(lock)
#define ALIB_DBG_PREVENT_RECURSIVE_METHOD_CALLS
#define ALIB_DBG_PREVENT_RECURSIVE_METHOD_CALLS_MEMBER_DECL

#define ALIB_ENUM_META_DATA( TEnum, ... )
#define ALIB_ENUM_META_DATA_RESOURCE_LOADER( TEnum )
#define ALIB_ENUM_NAMED( TEnum )
#define ALIB_ENUM_PARSABLE( TEnum )
#define ALIB_ENUM_READ_WRITE( TEnum, NameIdx, MinParseLengthIdx )
#define ALIB_ENUM_PRE_AND_POSTFIX( TEnum, PrefixString, PostfixString )
#define ALIB_ENUM_IS_ARITHMETICAL( TEnum )
#define ALIB_ENUM_IS_BITWISE( TEnum )
#define ALIB_ENUM_IS_ITERATABLE(TEnum, StopElement)
#define ALIB_ENUM_IS_ITERATABLE_BEGIN_END(TEnum, StartElement, StopElement )
#define ALIB_ENUM_SPECIFICATION_DECL(TSpecific, ...)
#define ALIB_ENUM_SPECIFICATION_IMPL(TSpecific)
#define ALIB_ENUM_SPECIFICATION( TSpecific, TEnum )

#define A_CHAR(STR)
#define A_SCHAR(STR)
#define A_CCHAR(STR)
#define A_NCHAR(STR)
#define A_WCHAR(STR)
#define A_XCHAR(STR)
#define ATMP_CHAR_COMPLEMENT( TChar )

#define ALIB_CHARACTER_ARRAY(TString, TChar, Access, Construction )
#define ALIB_CHARACTER_ARRAY_MUTABLE(TString, TChar, Construction )
#define ALIB_CHARACTER_ZT_ARRAY(TString, TChar, Access, Construction )
#define ALIB_CHARACTER_ZT_ARRAY_MUTABLE(TString, TChar, Construction )
#define ALIB_CHARACTER_ARRAY_IMPL_BUFFER(TString, TChar, ... )
#define ALIB_CHARACTER_ARRAY_IMPL_LENGTH(TString, TChar, ... )
#define ALIB_CHARACTER_ARRAY_IMPL_BUFFER_MUTABLE(TString, TChar, ... )
#define ALIB_CHARACTER_ARRAY_IMPL_LENGTH_MUTABLE(TString, TChar, ... )
#define ALIB_CHARACTER_ARRAY_IMPL_CONSTRUCT(TString, TChar, ... )
#define ALIB_CHARACTER_ZT_ARRAY_IMPL_BUFFER(TString, TChar, ... )
#define ALIB_CHARACTER_ZT_ARRAY_IMPL_LENGTH(TString, TChar, ... )
#define ALIB_CHARACTER_ZT_ARRAY_IMPL_BUFFER_MUTABLE(TString, TChar, ... )
#define ALIB_CHARACTER_ZT_ARRAY_IMPL_LENGTH_MUTABLE(TString, TChar, ... )
#define ALIB_CHARACTER_ZT_ARRAY_IMPL_CONSTRUCT(TString, TChar, ... )


#define ALIB_STRINGS_APPENDABLE_TYPE(TYPE)
#define ALIB_STRINGS_APPENDABLE_TYPE_N(TYPE)
#define ALIB_STRINGS_APPENDABLE_TYPE_W(TYPE)
#define ALIB_STRINGS_APPENDABLE_TYPE_DEF(TYPE, IMPL)
#define ALIB_STRINGS_APPENDABLE_TYPE_DEF_N(TYPE, IMPL)
#define ALIB_STRINGS_APPENDABLE_TYPE_DEF_W(TYPE, IMPL)
#define ALIB_STRINGS_APPENDABLE_TYPE_INLINE(TYPE, IMPL)
#define ALIB_STRINGS_APPENDABLE_TYPE_INLINE_N(TYPE, IMPL)
#define ALIB_STRINGS_APPENDABLE_TYPE_INLINE_W(TYPE, IMPL)
#define ALIB_STRINGS_SUPPRESS_STD_OSTREAM_OPERATOR(TYPE)
#define ALIB_STRING_DBG_CHK
#define ALIB_STRINGS_TO_NARROW(src,dest,bufSize)
#define ALIB_STRINGS_FROM_NARROW(src,dest,bufSize)
#define ALIB_STRINGS_TO_NARROW_ARG(src,bufSize)
#define ALIB_STRINGS_FROM_NARROW_ARG(src,bufSize)
#define ALIB_STRINGS_TO_WIDE(src,dest,bufSize)
#define ALIB_STRINGS_FROM_WIDE(src,dest,bufSize)
#define ALIB_STRINGS_TO_WIDE_ARG(src,bufSize)
#define ALIB_STRINGS_FROM_WIDE_ARG(src,bufSize)

#define ALIB_BOXING_CUSTOMIZE(TSource, TTarget, ...)
#define ALIB_BOXING_CUSTOMIZE_TYPE_MAPPING(TSource, TTarget)
#define ALIB_BOXING_CUSTOMIZE_TYPE_MAPPING_CONSTEXPR(TSource, TTarget)
#define ALIB_BOXING_CUSTOMIZE_NOT_UNBOXABLE(TSource, TTarget, ...)
#define ALIB_BOXING_CUSTOMIZE_NOT_UNBOXABLE_CONSTEXPR(TSource, TTarget, ...)
#define ALIB_BOXING_CUSTOMIZE_ARRAY_TYPE(TSource, TElement, ...)
#define ALIB_BOXING_CUSTOMIZE_ARRAY_TYPE_NON_UNBOXABLE(TSource, TElement, ...)
#define ALIB_BOXING_CUSTOMIZE_DENY_BOXING(TSource)
#define ALIB_BOXING_DEFINE_FEQUALS_FOR_COMPARABLE_TYPE
#define ALIB_BOXING_DEFINE_FISLESS_FOR_COMPARABLE_TYPE
#define ALIB_BOXING_REGISTER_FAPPEND_FOR_APPENDABLE_TYPE(TAppendable)
#define ALIB_BOXING_REGISTER_FAPPEND_FOR_APPENDABLE_TYPE_N(TAppendable)
#define ALIB_BOXING_REGISTER_FAPPEND_FOR_APPENDABLE_TYPE_W(TAppendable)
#define ALIB_BOXING_REGISTER_FAPPEND_FOR_APPENDABLE_TYPE_X(TAppendable)
#define ALIB_BOXING_VTABLE_DECLARE(TMapped, Identifier)
#define ALIB_BOXING_VTABLE_DECLARE_ARRAYTYPE(TMapped, Identifier)
#define ALIB_BOXING_VTABLE_DEFINE(TMapped, Identifier)
#define ALIB_BOXING_VTABLE_DEFINE_ARRAYTYPE(TMapped, Identifier)
#define ALIB_BOXING_VTABLE_REGISTER(Identifier)

#define ALIB_RESOURCES_DEFINE( TResourced, Resources, ResourceCategory, ResourceName )
#define ALIB_RESOURCED_IN_MODULE( TResourced, TModule, ResourceName )

#define ALIB_EXCEPTIONS(TEnum, TModule, ResourceName)

#define ALIB_CONFIG_VARIABLES( TEnum, TModule, ResourceName )

#define LOG_LOX
#define LOX_LOX
#define LOG_CI
#define LOX_CI
#define LOG_ACQUIRE
#define LOG_RELEASE
#define LOX_ACQUIRE
#define LOX_RELEASE

#define Log_Prune(...)
#define Log_SetSourcePathTrimRule(...)
#define Log_ClearSourcePathTrimRules(...)
#define Log_AddDebugLogger(...)
#define Log_RemoveDebugLogger(...)
#define Log_GetLogger(identifier, name)
#define Log_RemoveLogger(logger)
#define Log_SetDomain(...)
#define Log_RemoveThreadDomain(...)
#define Log_SetDomainSubstitutionRule(...)
#define Log_SetVerbosity(...)
#define Log_SetStartTime(...)
#define Log_MapThreadName(...)
#define Log_LogState(...)
#define Log_Verbose(...)
#define Log_Info(...)
#define Log_Warning(...)
#define Log_Error(...)
#define Log_Assert(...)
#define Log_If(...)
#define Log_Once(...)
#define Log_Entry(...)
#define Log_SetPrefix(...)
#define Log_Store(...)
#define Log_Retrieve(ident,...)
#define Log_Exception(...)

#define Lox_Prune(...)
#define Lox_SetSourcePathTrimRule(...)
#define Lox_ClearSourcePathTrimRules(...)
#define Lox_GetLogger(identifier, name)
#define Lox_RemoveLogger(logger)
#define Lox_SetDomain(...)
#define Lox_RemoveThreadDomain(...)
#define Lox_SetDomainSubstitutionRule(...)
#define Lox_SetVerbosity(...)
#define Lox_SetStartTime(...)
#define Lox_MapThreadName(...)
#define Lox_LogState(...)
#define Lox_Verbose(...)
#define Lox_Info(...)
#define Lox_Warning(...)
#define Lox_Error(...)
#define Lox_Assert(...)
#define Lox_If(...)
#define Lox_Once(...)
#define Lox_Entry(...)
#define Lox_Store(...)
#define Lox_Retrieve(ident,...)
#define Lox_SetPrefix(...)
#define Lox_Exception(...)

#define CALCULUS_CALLBACK(func)
#define CALCULUS_DEFAULT_AUTOCAST
#define CALCULUS_SIGNATURE

#define ALIB_CLI_COMMANDS(TEnum, TModule, ResourceName)
#define ALIB_CLI_PARAMETERS(TEnum, TModule, ResourceName)
#define ALIB_CLI_OPTIONS(TEnum, TModule, ResourceName)
#define ALIB_CLI_EXIT_CODES(TEnum, TModule, ResourceName)


------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------

/**
@defgroup GrpALibMacros    ALib Macros


This document lists all "macros" of \alib, which volunteers to separate preprocessor definitions
into \ref alib_ref_prepro "three categories", with <em>"macros"</em> being the third.

Often, the definition of macros depend on the second category, \ref GrpALibCodeSelectorSymbols,
which in turn mostly depend on the first, which is \ref GrpALibCompilerSymbols.


The following sections of this document lists macros that are not related to a specific
\alibmod:

&nbsp;&nbsp;      \ref GrpALibMacros_alib_version      "ALib Version And Feature Verification"
<br> &nbsp;&nbsp; \ref GrpALibMacros_preprohelper      "C/C++ Preprocessor Helpers"
<br> &nbsp;&nbsp; \ref GrpALibMacros_langlink          "C/C++ Language And Linkage"
<br> &nbsp;&nbsp; \ref GrpALibMacros_warnings          "C/C++ Compiler Warning Control"
<br> &nbsp;&nbsp; \ref GrpALibMacros_dbgmessages       "Debug Assertions, Warnings and Errors"
<br> &nbsp;&nbsp; \ref GrpALibMacros_tmp               "C++ Template Meta Programming"
<br> &nbsp;&nbsp; \ref GrpALibMacros_locksandrecursion "Resource Locking and Recursive Programming"

Followed to this, module-specific macros are documented:

&nbsp;&nbsp;      \ref GrpALibMacros_mod_enums         "Module Enums"
<br> &nbsp;&nbsp; \ref GrpALibMacros_mod_characters    "Module Characters"
<br> &nbsp;&nbsp; \ref GrpALibMacros_mod_strings       "Module Strings"
<br> &nbsp;&nbsp; \ref GrpALibMacros_mod_boxing        "Module Boxing"
<br> &nbsp;&nbsp; \ref GrpALibMacros_mod_resources     "Module Resources"
<br> &nbsp;&nbsp; \ref GrpALibMacros_mod_results       "Module Results"
<br> &nbsp;&nbsp; \ref GrpALibMacros_mod_config        "Module Configuration"
<br> &nbsp;&nbsp; \ref GrpALibMacros_mod_alox_lowlevel "Module ALox - Lowlevel Macros"
<br> &nbsp;&nbsp; \ref GrpALibMacros_mod_alox_debug    "Module ALox - Debug Logging"
<br> &nbsp;&nbsp; \ref GrpALibMacros_mod_alox_release  "Module ALox - Release Logging"
<br> &nbsp;&nbsp; \ref GrpALibMacros_mod_expressions   "Module Expressions"
<br> &nbsp;&nbsp; \ref GrpALibMacros_mod_cli           "Module CLI"

@{ @}

\~Comment ##################    ALib Version And Feature Verification       ################################## \~
@addtogroup GrpALibMacros
@{

@name ALib Version And Feature Verification
\anchor GrpALibMacros_alib_version
Macros used to verify that the \alib binary used has the right version is is compiled with
the same feature set as the current compilation unit.
For this, version and feature flags are compiled statically into the library.
The macros are used internally, respectively 'automatically'. Hence, they need not to be used
directly clients of the library.


\def  ALIB_VERSION
  The \alib version number. The value of this macro is written into field
  \alib{Module::Version} of each module's singleton.

  \see Programmer's manual chapter \ref alib_manual_bootstrapping_assertcomp.


\def  ALIB_REVISION
  The \alib revision number. The value of this macro is written into field
  \alib{Module::Revision} of each module singleton.


\def  ALIB_COMPILATION_FLAGS
  Macro to provide a compilation flag verifier value to be used with method
  \alib{Module::VerifyCompilationFlags} which is to be invoked on singleton \alib{ALibModules}.

  \see Programmer's manual chapter \ref alib_manual_bootstrapping_assertcomp.

@}
@}

\~Comment #################    C/C++ Preprocessor Helper Macros   ############################# \~

@addtogroup GrpALibMacros
@{
@name C/C++ Preprocessor Helper Macros
\anchor GrpALibMacros_preprohelper

The following macros are fundamental and building blocks for other macros.

@{

 \def  ALIB_STRINGIFY
   Makes as string from a preprocessor macro parameter. The string character type equals the
   default character type \alib{characters,character}.

   @param a   The token to stringyfy.


 \def  ALIB_NSTRINGIFY
   Makes as narrow string from a preprocessor macro parameter.

   @param a   The token to stringyfy.


 \def  ALIB_CONCAT
   Concatenates two preprocessor macro parameters into one symbol.

   @param a   The first part of the concatenated code.
   @param b   The second part of the concatenated code.

 \def  ALIB_IDENTIFIER
   This macro assembles an 'anonymous' identifier using the given prefix and the current
   line number within the source code file. This macro is used within other macros that
   need a C/C++ identifier internally.<br>
   As a sample, see macro \ref ALIB_OWN.

   @param prefix  A prefix token to use.

 \def  ALIB_EMPTY
   Defines an empty macro. This is useful for example if a macro defined variadic arguments
   (<c>'...'</c>) and a user wants to omit to provide a value. Some compilers (preprocessors)
   might warn about empty variadic arguments, if nothing was given. This macro avoids this
   and increased the readability.


 \def  ALIB_COMMA
   Defines a simple comma (<c>','</c>). Used with macros when otherwise the use of a comma symbol
   leads to ambiguous syntax. For example when passing template types to macros.

   Used with macros when otherwise the use of a comma symbol
   leads to ambiguous syntax. For example when passing template types to macros as shown here:

           MY_MACRO( std::vector<int ALIB_COMMA double> )


 \def  ALIB_COMMA_DBG
   Defines a simple comma (<c>','</c>) with \ref ALIB_DEBUG "debug compilations". In release
   compilations the macro is empty. This is useful for example when methods change their
   signature depending on the compilation type. The latter is unavoidable i.e if caller source code
   information should be passed for debugging.

   Used with macros when otherwise the use of a comma symbol
   leads to ambiguous syntax. For example when passing template types to macros.

 \def  ALIB_STATIC_ASSERT
   A simple macro that wraps language keyword \c static_assert. Common compilers display
   the condition expression that failed with the compilation error. The purpose of this
   macro is to hide this expression away. For this, the expression is assigned to a \c constexpr
   boolean value first and then assertion uses is only this variable as its expression.

   The variable name is given with parameter \p{CondVariable} and should be speaking for itself,
   while the assertion text gives a longer explanation.

 \def  ALIB_STATIC_DENY
   See macro \ref ALIB_STATIC_ASSERT for a general explanation. The only difference from this is that
   the negation of the given expression is used. Hence the opposite of an assert, a "denial".

@}
@}


\~Comment ###############    C/C++ Language And Linkage Macros    ############################### \~

@addtogroup GrpALibMacros
@{

@name C/C++ Language And Linkage Macros
\anchor GrpALibMacros_langlink

The macros listed here are supporting C++ compilation and linking control and language
specific utilities.


@{

\def  ALIB_API
  Used to export/import C++ symbols into a dynamic link library.
  Defined under Windows/MSC when compiling or using \alib classes inside a DLL.
  Dependent on \ref ALIB_API_IS_DLL and \ref ALIB_API_NO_DLL.

\def ALIB_NO_RETURN
  Used as alias to C++ attribute <c>[[noreturn]]</c>.
  Defined if the compiler has support for it, else empty.

\def  ALIB_SIZEOF_WCHAR_T
  Compiler/platform dependent value. Gives the sizeof values of type \c wchar_t in bytes.
  Possible values are \b 2 and \b 4.


\def  ALIB_CPP14_CONSTEXPR
  Macro used in situations when C++ keyword \c constexpr is not allowed in <b>C++ 11</b> but in
  <b>C++ 14</b> onwards.

\def  ALIB_CPP14_REL_CONSTEXPR
  Macro used in situations when C++ keyword \c constexpr is only allowed in release-compilations
  with <b>C++ 11</b> but with <b>C++ 14</b> onwards in debug- and release-compilations.<br>
  This for example is the case when constructors exclusively contain assertion code that exists only
  in debug-compilations, but not in release-compilations.

\def  ALIB_REL_CONSTEXPR
  Macro used in situations when C++ keyword \c constexpr is only allowed in release-compilations.
  This is for example the case, if constructors contain debug code that forbids to declare them
  \c constexpr.

\def ALIB_FORCE_INLINE
  Uses compiler-specific annotation (including keyword \c inline if necessary) to mark a method
  or function to be compiled and linked inline.<br>

  \note
    While this symbol might be used for "manual" performance optimization, such use is recommended
    only in seldom cases. \alib itself uses this if technical reasons impose a strict requirement
    for inlining. This is for example the case, if template meta programming select different
    versions depending on type traits structs. Such traits might be selected differently per
    compilation unit (CPP-file). If not inlined, the selection might not be effective.
    Measured with as Version 1902, in release compilations, the use of the symbol does not even
    effect the compilation output of the \alib library itself.
    At the same time, a typical \alib enabled application increased code size by less than one
    percent in debug compilation.

\def  ALIB_CALLER
  This macro fills in the built-in compiler symbols that provide the current source file,
  line number and function strings.<p>
  The macro should be used anywhere where this information is passed (as a nested macro in
  debug macros)<p>

\def  ALIB_CALLER_PRUNED
  This macro is the same as \ref ALIB_CALLER but empty if \ref ALIB_DEBUG is
  not defined.<br>
  In comparison to \ref ALIB_CALLER_NULLED, this macro is to be used with invocations of
  methods that lack the corresponding parameters in release compilations.

\def  ALIB_CALLER_NULLED
  In \ref ALIB_DEBUG "debug compilations" this macro is the same as \ref ALIB_CALLER.
  Otherwise evaluates to <c>nullptr, 0, nullptr</c>.<br>
  In comparison to \ref ALIB_CALLER_PRUNED, this macro is to be used with invocations of
  methods that keep the corresponding parameters in release compilations.

@}
@}



\~Comment ##################     C/C++ Compiler Warning Control      ############################ \~

@addtogroup GrpALibMacros
@{
@name C/C++ Compiler Warning Control
\anchor GrpALibMacros_warnings

\alib sources are designed to be compiled on different compilers using the highest possible
compiler warning levels available.
In some situations, some warnings need to be temporarily disabled. The following macros do
this in a compiler agnostic way.


\def  ALIB_WARNINGS_RESTORE
 Reinstalls previous compiler warning settings. To be used in combination with macros
 - #ALIB_WARNINGS_UNINITIALIZED_OFF.
 - #ALIB_WARNINGS_MACRO_NOT_USED_OFF.
 - #ALIB_WARNINGS_OVERLOAD_VIRTUAL_OFF.
 - #ALIB_WARNINGS_ALLOW_SPARSE_ENUM_SWITCH
 - #ALIB_WARNINGS_ALLOW_BITWISE_SWITCH


\def  ALIB_WARNINGS_UNINITIALIZED_OFF
 Preprocessor macro to disable compiler warnings about uninitialized values.

\def  ALIB_WARNINGS_MACRO_NOT_USED_OFF
 Preprocessor macro to disable compiler warnings about unused preprocessor macros.

\def  ALIB_WARNINGS_ALLOW_MACRO_REDEFINITION
 Preprocessor macro to disable compiler warnings on redefining macros without prior un-defining.

\def  ALIB_WARNINGS_OVERLOAD_VIRTUAL_OFF
 Preprocessor macro to disable compiler warnings about virtual methods that become hidden
 by overloaded methods with a different signature.

\def  ALIB_WARNINGS_ALLOW_SPARSE_ENUM_SWITCH
 Preprocessor macro to disable compiler warnings when an enumeration element is switched while
 not all enumeration elements get caught.

\def  ALIB_WARNINGS_ALLOW_BITWISE_SWITCH
 Preprocessor macro to disable compiler warnings when a
 "bitwise type scoped enumeration" (see \alib{enums,T_EnumIsBitwise}) or similar types with
 'sparse' case coverage are used in a switch statement.

\def  ALIB_WARNINGS_IGNORE_DOCS
 Preprocessor macro to disable compiler warnings according to source documentation (as of today
 known to be thrown by \b clang only).

\def  ALIB_WARNINGS_IGNORE_UNUSED_PARAMETER
 Preprocessor macro to disable compiler warnings concerning unused parameters.

\def  ALIB_FALLTHROUGH
 Used with keyword \c switch to annotate a \c case block that has no \b break or (\c return, etc.).
 Avoids a warning with some compilers.

@}
@}


\~Comment ##########    Debug Assertions, Warnings and Errors     ########## \~

@addtogroup GrpALibMacros
@{

@name Debug Assertions, Warnings and Errors
\anchor GrpALibMacros_dbgmessages

The macros listed here are defined in two different versions, depending on the \alib distribution.
With single <b>%ALib Modules</b> that do not incorporate class
\ref aworx::lib::results::Report and family, namespace function
\ref aworx::lib::DbgSimpleALibMsg (and overloads) are used to write the messages.
The default implementation of this message invokes \b %assert(false) if the message is of
error type.<br>
There is a very simple "plug-in" concept in place that allows to redirect this method to
a user defined one which may act differently.

If class \b report is included in the selected \alib distribution, two things happen:
- the aforementioned plug-in is implemented and an \alib Report is generated inside
  the plug-in function.
- The macros themselves are redefined to directly use the \alib Report facility.
Such redefinition happens "in the middle" of header inclusion (as early as possible), with
the effect that most classes of \alib are compiled using the simple version, but still use
the mechanics of \alib Reports. Other parts of \alib classes, and of-course all user code,
will have the more sophisticated, report-based versions of the macros in place. The
huge advantage of them is, that those accept an arbitrary list of arguments which are boxed
and passed to a formatter. This allows to easily compose detailed and formatted debug messages.

If also module \alibmod_alox is compiled into the library, then a plug-in that uses
\alox for the message output is used. See class \alox{ALoxReportWriter} for more
information.

\def  ALIB_ERROR
  Writes the given message objects as an error.

  @param ...   The objects used to format the message string.

\def  ALIB_WARNING
  Writes the given message objects as an warning.

  @param ...   The objects used to format the message string.

\def  ALIB_MESSAGE
  Writes the given message.

  @param ...   The objects used to format the message string.

\def  ALIB_ASSERT
  If given condition is \c false, error message "Assertion Failed" is written.

  @param cond  The condition assert.

\def  ALIB_ASSERT_ERROR
  If given condition is \c false, given message objects are written as an error.

  @param cond  The condition assert.
  @param ...   The objects used to format the message string.

\def  ALIB_ASSERT_WARNING
  If given condition is \c false, given message objects are written as a warning.

  @param cond  The condition assert.
  @param ...   The objects used to format the message string.

\def  ALIB_ASSERT_MESSAGE
  If given condition is \c false, given message objects are written as a message.

  @param cond  The condition assert.
  @param ...   The objects used to format the message string.

\def  ALIB_ASSERT_RESULT_EQUALS
  Asserts that a return value of a function call equals the given expected value.
  In release compilation, the function is still invoked, but no check is performed.

  @param func   The function to invoke.
  @param value  The value to test for.

\def  ALIB_ASSERT_RESULT_NOT_EQUALS
  Asserts that a return value of a function call is not equal to the given value.
  In release compilation, the function is still invoked, but no check is performed.

  @param func   The function to invoke.
  @param value  The value to test for.

\def  ALIB_ASSERT_RESULT_GREATER_THAN
  Asserts that a return value of a function call is greater than the given value.
  In release compilation, the function is still invoked, but no check is performed.

  @param func   The function to invoke.
  @param value  The value to test for.

\def  ALIB_ASSERT_RESULT_LESS_THAN
  Asserts that a return value of a function call is less than the given expected value.
  In release compilation, the function is still invoked, but no check is performed.

  @param func   The function to invoke.
  @param value  The value to test for.

@}
@}


\~Comment ##################     C++ Template Meta Programming      ############################ \~

@addtogroup GrpALibMacros
@{

@name C++ Template Meta Programming
\anchor GrpALibMacros_tmp
Simple shortcut macros usable with template meta programming. Unlike other \alib macros,
their prefix is \b "ATMP_". This is for reducing their size as they are frequently used in more
complex type expressions.

\~Comment ----------------------          Is/Eq          ------------------------------------ \~
\def  ATMP_IS_ENUM
 Simple shortcut to <c>typename std::is_pointer<T>::value</c>.
 While it is not so much shorter, due to syntax highlighting of macros of modern
 editors, it is still better readable.

 @param T     The type to convert to plain.

\def  ATMP_IS_PTR
 Simple shortcut to <c>typename std::is_pointer<T>::value</c>.
 While it is not so much shorter, due to syntax highlighting of macros of modern
 editors, it is still better readable.

 @param T     The type to convert to plain.


\def  ATMP_IS_ARR
 Simple shortcut to <c>typename std::is_array<T>::value</c>.
 While it is not so much shorter, due to syntax highlighting of macros of modern
 editors, it is still better readable.

 @param T     The type to convert to plain.


\def  ATMP_EQ
 Simple shortcut to <c>std::is_same<T1,T2>::value</c>.
 While it is not so much shorter, due to syntax highlighting of macros of modern
 editors, it is still better readable.

 @param Tlhs  The lhs type to compare
 @param Trhs  The rhs type to compare


\def  ATMP_ISOF
 Tests if type \p{T} is either the same or a derived type of \p{TBase}.
 (This is an alias to <c>std::is_base_of<TBase, T >::value</c>.)

 @param T     The type to test for being a \p{TBase}.
 @param TBase The base type.
 @return \c true if \p{T} is a (derived) \p{TBase}, \c false otherwise.


\~Comment ----------------------          Remove          ------------------------------------ \~
\def  ATMP_RC
 Simple shortcut to type modifier <c>typename std::remove_const<T>::type</c>.
 While it is not so much shorter, due to syntax highlighting of macros of modern
 editors, it is still better readable.

 @param T     The type to remove \c const from.

\def  ATMP_RR
 Simple shortcut to type modifier  <c>typename std::remove_reference<T>::type</c>.

 @param T     The type to convert to plain.

\def  ATMP_RP
 Simple shortcut to type modifier  <c>typename std::remove_pointer<T>::type</c>.

 @param T     The type to convert to plain.

\def  ATMP_RE
 Simple shortcut to type modifier  <c>typename std::remove_extent<T>::type</c>.

 @param T     The type to convert to plain.


\def  ATMP_RCV
 Simple shortcut to type modifier <c>typename std::remove_cv<T>::type</c>.
 While it is not so much shorter, due to syntax highlighting of macros of modern
 editors, it is still better readable.

 @param T     The type to remove \c const and \c valatile modifiers from.


\def  ATMP_RCVR
 Simple shortcut to nested type modifiers <c>remove_cv( remove_reference( T ) )</c>.<br>
 Note, this is less strong than \ref ATMP_RCVP as it leaves the pointer in the type.

 @param T     The type to convert to plain, leaving pointer.


\def  ATMP_RCVP
 Simple shortcut to nested type modifiers
 <c>std::remove_cv</c>, <c>std::remove_pointer</c> and <c>std::remove_reference</c>.

 @param T     The type to convert to plain.


\def  ATMP_RECVP
 Simple shortcut to nested type modifiers that removes the extent of a type as well as pointer
 and CV qualifiers.

 @param T     The type to convert to plain.

\~Comment ---------------------    enable_if / conditional    ----------------------------------- \~
\def  ATMP_VOID_IF
 Shortcut to <c>typename std::enable_if<Cond>::type</c>

 @param Cond   The condition that enables \c void.

\def  ATMP_T_IF
 Shortcut to <c>typename std::enable_if<T, Cond>::type</c>.

 @param T      The type to result in, if \p{Cond} is \c true.
 @param Cond   The condition that enables \b T.

\def  ATMP_IF_T_F
 Ternary conditional operator which selects type \p{T} if condition \p{Cond} is \c true and type
 \p{F} otherwise.

 @param Cond   The condition.
 @param T      The type select if \p{Cond} is \c true.
 @param F      The type select if \p{Cond} is \c false.



\~Comment ----------------------    Method Selection      ------------------------------------ \~
\def  ATMP_SELECT_IF_1TP
 Implements the template specification code of a class member method which has one template parameter
 \p{TParam} and is selected using \c std::enable_if for one further template parameter.
 If the condition given with the variadic argument, which needs to be a boolean expression is not
 met, the function is not offered for the currently compiled invocation.

 The macro is to be placed at the start of the method declaration, replacing the otherwise
 necessary statement <c>template< ></c>.<br>
 In addition to the template statement, the macro adds macro \ref ALIB_FORCE_INLINE.
 Therefore, no additional use of keyword \c inline must not made after the macro and the method's
 return type (or constructor name).


 @param TParam   Type and name of the template parameter of the method, for example "typename T".
 @param ...      The condition for selecting the method.


\def  ATMP_SELECT_IF_2TP
 Same as \ref ATMP_SELECT_IF_1TP but for class member methods with two template parameters
 (adding a third, anonymous one).

 @param TParam1  Type and name (separated by a space) of the first template parameter of the method.
 @param TParam2  Type and name (separated by a space) of the second template parameter of the method.
 @param ...      The condition for selecting the method.


\def  ATMP_SELECT_IF_3TP
 Same as \ref ATMP_SELECT_IF_1TP but for methods with three template parameters
 (adding a fourth, anonymous one).

 @param TParam1  Type and name (separated by a space) of the first template parameter of the method.
 @param TParam2  Type and name (separated by a space) of the second template parameter of the method.
 @param TParam3  Type and name (separated by a space) of the third template parameter of the method.
 @param ...      The condition for selecting the method.

\def  ATMP_SELECT_IF_4TP
 Same as \ref ATMP_SELECT_IF_1TP but for methods with four template parameters
 (adding a fifth, anonymous one).

 @param TParam1  Type and name (separated by a space) of the first template parameter of the method.
 @param TParam2  Type and name (separated by a space) of the second template parameter of the method.
 @param TParam3  Type and name (separated by a space) of the third template parameter of the method.
 @param TParam4  Type and name (separated by a space) of the fourth template parameter of the method.
 @param ...      The condition for selecting the method.


\def  ATMP_RETURN_IF_1TP
 Implements the template specification code of a class member method which has one template parameter
 \p{TParam} and is selected using \c std::enable_if to specify the return type \p{TResult}.
 If the condition given with the variadic argument, which needs to be a boolean expression is not
 met, the function is not offered for the currently compiled invocation.

 The macro is to be placed at the start of the method declaration, replacing the otherwise
 necessary statement <c>template< ></c>.<br>
 In addition to the template statement, the macro adds macro \ref ALIB_FORCE_INLINE.
 Therefore, no additional use of keyword \c inline must not made after the macro and the method's
 return type (or constructor name).


 @param TReturn  The return type of the method to declare.
 @param TParam   Type and name of the template parameter of the method, for example "typename T".
 @param ...      The condition for selecting the method.

\def  ATMP_RETURN_IF_2TP
 Same as \ref ATMP_RETURN_IF_1TP but for class member methods with two template parameters.

 @param TReturn  The return type of the method to declare.
 @param TParam1  Type and name of the first template parameter of the method.
 @param TParam2  Type and name of the second template parameter of the method.
 @param ...      The condition for selecting the method.

@}
@}



\~Comment #################  Resource Locking and Recursive Programming   ####################### \~

@addtogroup GrpALibMacros
@{

@name Macros for Resource Locking and Recursive Programming
\anchor GrpALibMacros_locksandrecursion
The macros listed here have a direct relationship with classes defined in \alib
and with their use.


\def  ALIB_OWN
 This preprocessor macro defines an object \alib{Owner}. The template type is deduced
 from parameter \p{ownable} using C++ keyword \c decltype.

 By using this macro there is no need to "invent" an (otherwise unreferenced) identifier for
 that definition. (Note: this macro exists, because C++ does not support anonymous local
 instances.)<br>
 As a sample, without using this macros a piece of code code using class \alib{Owner}
 could look like this:

      {
          Owner myOwner( myOwnable );

          // do stuff
          ...  (this code never refers to "myOwner")
      }

  With the use of this macro, the code changes to:<br>

      {
          ALIB_OWN( myOwnable ); // internally created identifier name, avoids confusion :-)

          // do stuff
          ...
      }

 \see Macros \ref ALIB_LOCK and \ref ALIB_LOCK_WITH are using this macro to lock
      types \alib{threads,ThreadLockNR} and \alib{threads,ThreadLock}.<br>
      Macro \ref ALIB_DBG_PREVENT_RECURSIVE_METHOD_CALLS implements a mechanism to detect and assert
      recursive function calls.

  @param ownable   The \b %Ownable to acquire and release.


\def  ALIB_LOCK
 Shortcut to macro \ref ALIB_OWN, providing <c>*this</c> as the owner. Usually used with
 methods of types derived from classes \alib{threads,ThreadLock} or \alib{threads,ThreadLockNR}

 \note
   Even if \alibmod_threads is not included in the alib distribution, this macro, as well as
   \ref ALIB_LOCK_WITH will be defined (to empty). This way, it is quite easy to write
   code that uses locking in the case alibmod_nolink_threads is available, and that does not
   use locking otherwise. In the latter case, only the definition of the locks have to be
   enclosed by preprocessor <c>\#if/\#endif</c> statements testing for symbol
   \ref ALIB_MODULE_THREADS.


\def  ALIB_LOCK_WITH
 Alias name for macro \ref ALIB_OWN to have better readable code if parameter \p{owner} of macro
 \b %ALIB_OWN is of type \alib{threads,ThreadLock} or \alib{threads,ThreadLockNR}.

 \see
   See also the note in documentation of \ref ALIB_LOCK.

  @param lock   The \b %Ownable to acquire and release.


\def  ALIB_DBG_PREVENT_RECURSIVE_METHOD_CALLS
 This macro may be placed at the beginning of a function to detect and assert recursive
 calls of that function. It is useful when recursion might happen, but must not.<br>
 The internally uses macro \ref ALIB_OWN and hence class \alib{Owner} that uses C++ stack
 unwinding to be sure to always clear the flag, even if an exception occurs.

 In the case that the macro is placed in more than one method, it can be used to assure that none
 of he methods calls any of the others.

 A prerequisite of the use of the macro is to have macro
 \ref ALIB_DBG_PREVENT_RECURSIVE_METHOD_CALLS_MEMBER_DECL placed in the member declaration area
 of the type.

 This macro is only active in debug-compilations and is available with the inclusion of
 header filer "alib/lib/owner.hpp.


\def  ALIB_DBG_PREVENT_RECURSIVE_METHOD_CALLS_MEMBER_DECL
 Used with macro \ref ALIB_DBG_PREVENT_RECURSIVE_METHOD_CALLS, usually in header compilation unit
 to declare a boolean class member that is used for detecting recursions.

@}
@}



\~Comment ##################      ALib Module Enums      ################################## \~

@addtogroup GrpALibMacros
@{

@name ALib Module Enums
\anchor GrpALibMacros_mod_enums

The macros in this section are introduced by module \alibmod_enums and allow to specialize
type-traits structs
\alib{resources,T_EnumMetaDataDecl},
\alib{enums,T_EnumIsBitwise} and
\alib{enums,T_EnumIsIteratable} for scoped or non-scoped enum types.

In respect to \alib enum meta data, besides the general macro, two predefined, oftenly used
meta data types (tuple types) are provided: one which is just adding element names for output
of enum element names and a the second that also allows parsing the names.<br>
In addition, for both predefined meta data types a version which standardizes the externalization
of the data with class \alib{resources,Resources} is provided.

\attention
- All macros in this section have to be placed in global scope (outside of namespaces and types).
- For technical reasons, neither the macros nor the concepts behind them are applicable to
  enum types that are defined as \c private or \c protected inner types of structs or classes.

@{

\~Comment #################################################################################### \~
\def  ALIB_ENUM_META_DATA
  Macro used to specialize type-traits struct
  \alib{resources,T_EnumMetaDataDecl,T_EnumMetaDataDecl<TEnum>}.

  The type of meta data (per enumeration element)  will be set in a specialization of
  \alib{resources,T_EnumMetaDataDecl::TTuple} to a \c std::tuple. The first tuple element will
  be of the underlying integer type of \p{TEnum}. The list of types given as variadic
  macro arguments are appended to the tuple, starting with tuple index \c 1.

  With the specializations in place, template class \alib{resources,EnumMetaData} becomes
  available for type \p{TEnum}.

  @param TEnum             The enumeration type to define meta data for.
  @param ...               The types of the tuple excluding the first element of type \c int
                           which always is present.

\~Comment #################################################################################### \~
\def ALIB_ENUM_META_DATA_RESOURCE_LOADER
  This macro may be used with enum types that:
  - are equipped with \alib{resources,T_EnumMetaDataDecl,enum meta data}
    (see also macro \ref ALIB_ENUM_META_DATA)
  - such meta data is not of a simple type as defined with
    macros \ref ALIB_ENUM_NAMED or ALIB_ENUM_PARSABLE.
  - are resource-defined (see macro \ref ALIB_RESOURCES_DEFINE)

  For enum types that meet the conditions above, this macro implements method
  \alib{resources,EnumMetaData::CheckLoad}. The implementation uses static method
  \alib{resources,ResourcedTupleLoader::LoadTable} to load meta data from \alib{resources,Resources}
  into \alib{resources,EnumMetaData::Table}.

  \attention
    Prior to using this macro, header file <c>"alib/lib/resourcedtupleloader.hpp"</c> has
    to be included.<br>
    (One of the reasons why the load methods are implemented using macros, is to avoid including
    this header by default with \alib meta data feature.)

  \note
    Predefined, simple tuple types as defined with macros
    \ref ALIB_ENUM_NAMED and \ref ALIB_ENUM_PARSABLE do not need a dedicated
    implementation of \alib{resources,EnumMetaData::CheckLoad}, because the default implementation
    is capable of loading these types from resources.


  @param TEnum     The enumeration type to define meta data for.

\~Comment #################################################################################### \~
\def ALIB_ENUM_NAMED
  Shortcut to macros
  - \ref ALIB_ENUM_META_DATA providing just one meta info type, \c aworx::String
  - \ref ALIB_ENUM_READ_WRITE providing value \c 1 for parameter \p{NameIdx} and
    \c 0 for parameter \p{MinParseLengthIdx}.

  This macro is useful to define a simple "name translation table" for enum types, which will
  be used by TMP structs
  \alib{strings::APPENDABLES,T_Append<TEnum\,character>,T_Append<TEnum\,TChar>} and
  \alib{strings::APPENDABLES,T_Append<TEnumBitwise\,TChar>,T_Append<TEnumBitwise\,TChar>}
  and this way allow to "append" enum elements to instances of class \alib{strings,TAString,AString}.

  @param TEnum             The enumeration type to define meta data for.

\~Comment #################################################################################### \~
\def ALIB_ENUM_PARSABLE
  Shortcut to macros
  - \ref ALIB_ENUM_META_DATA providing two meta info type, \c aworx::String and \c int
  - \ref ALIB_ENUM_READ_WRITE providing value \c 1 for parameter \p{NameIdx} and
    \c 2 for parameter \p{MinParseLengthIdx}.

  Same as \ref ALIB_ENUM_NAMED, this macro is useful to define a "name translation table"
  for enum types, which will be used by TMP structs
  \alib{strings::APPENDABLES,T_Append<TEnum\,character>,T_Append<TEnum\,TChar>} and
  \alib{strings::APPENDABLES,T_Append<TEnumBitwise\,TChar>,T_Append<TEnumBitwise\,TChar>}
  and this way allow to "append" enum elements to instances of class \alib{strings,TAString,AString}.

  Furthermore, with \alib{resources,T_EnumMetaDataDeclReadWrite::MinParseLengthIndex} being
  specialized to denote tuple element \c 2  (the second custom tuple element of type \c int), methods
  \alib{strings,TSubstring::ConsumeEnum,Substring::ConsumeEnum},
  \alib{strings,TSubstring::ConsumeEnumBitwise,Substring::ConsumeEnumBitwise} and
  \alib{strings,TSubstring::ConsumeEnumOrBool,Substring::ConsumeEnumOrBool}
  become available.

  @param TEnum             The enumeration type to define meta data for.


\~Comment #####################    EnumReadWriteInfo      ############################# \~


\~Comment #################################################################################### \~
\def  ALIB_ENUM_READ_WRITE
  Macro used to specialize TMP struct
  \alib{resources,T_EnumMetaDataDeclReadWrite,T_EnumMetaDataDeclReadWrite<TEnum>}.

  The specialization is effective only if TMP struct
  \alib{resources,T_EnumMetaDataDecl,T_EnumMetaDataDecl<TEnum>} is specialized as well
  (see macro \ref ALIB_ENUM_META_DATA).

  Parameter \p{NameIdx} denotes the tuple element that holds the name of each element
  usable for output or parsing. Consequently, this parameter must not equal \c 0
  which is the fixed tuple element index representing the enum element value.
  The value is used with methods
  \alib{strings::APPENDABLES,T_Append<TEnum\,character>,T_Append<TEnum\,TChar>} and
  \alib{strings::APPENDABLES,T_Append<TEnumBitwise\,TChar>,T_Append<TEnumBitwise\,TChar>},
  which write enum element names into objects of type \alib{strings,TAString,AString}.

  Parameter \p{MinReadLengthIdx} \e may denote the tuple element that holds an \c int value
  giving the minimum number of characters to read, when parsing this enum element with
  \alib{strings,TSubstring::ConsumeEnum,Substring::ConsumeEnum},
  \alib{strings,TSubstring::ConsumeEnumBitwise,Substring::ConsumeEnumBitwise} or
  \alib{strings,TSubstring::ConsumeEnumOrBool,Substring::ConsumeEnumOrBool}.
  If set to \c 0, parsing is disabled.

  With the specializations in place, template class \alib{resources,EnumReadWriteInfo} becomes
  available for type \p{TEnum}.


  @param TEnum             The enumeration type to specialize \p{%T_EnumMetaDataDeclReadWrite}
                           for.
  @param NameIdx           The "column" of the tuple that represents the element name.
                           element given in column \p{enumIdx}.
  @param MinParseLengthIdx The tuple element index that holds an \c int giving the minimum number
                           of characters to parse.

\~Comment #################################################################################### \~
\def  ALIB_ENUM_PRE_AND_POSTFIX
  Macro used to specialize TMP struct
  \alib{resources,T_EnumMetaDataPreAndPostFix,T_EnumMetaDataPreAndPostFix<TEnum>}.

  \see For more information relate to
    - Documentation of TMP struct \alib{resources,T_EnumMetaDataPreAndPostFix}.
    - Methods
      \alib{resources,EnumReadWriteInfo::Prefix,Prefix} and
      \alib{resources,EnumReadWriteInfo::Prefix,Postfix} of template class
      \alib{resources,EnumReadWriteInfo}.

  @param TEnum             The enumeration type to specialize
                           \alib{resources,T_EnumMetaDataPreAndPostFix} for.
  @param PrefixString      A constant string that denotes the type prefix, respectively a
                           postfix to the resource name of it.
  @param PostfixString     A constant string that denotes the type postfix, respectively a
                           postfix to the resource name of it.

\~Comment ######## T_EnumIsArithmetical (has to be doxed here inside this sub-group) ######### \~

\def  ALIB_ENUM_IS_ARITHMETICAL
  Specializes TMP struct \alib{enums,T_EnumIsArithmetical} to inherit \c std::true_type.

  Usually, this macro is placed in a header file, probably close to the enum type definition.
  However, it has to be placed <b>in global (no) namespace</b>.

  \see Documentation of TMP struct \alib{enums,T_EnumIsArithmetical} for more information.

  @param TEnum    Type of a scoped or non-scoped enumeration that is to be declared a bitwise
                  type.

\~Comment ########### T_EnumIsBitwise (has to be doxed here inside this sub-group) ########### \~

\def  ALIB_ENUM_IS_BITWISE
  Specializes TMP struct \alib{enums,T_EnumIsBitwise} to inherit \c std::true_type.

  Usually, this macro is placed in a header file, probably close to the enum type definition.
  However, it has to be placed <b>in global (no) namespace</b>.

  \see Documentation of TMP struct \alib{enums,T_EnumIsBitwise} for more information.

  @param TEnum    Type of a scoped or non-scoped enumeration that is to be declared a bitwise
                  type.



\~Comment ########### T_EnumIsIteratable (has to be doxed here inside this sub-group) ####### \~

\def  ALIB_ENUM_IS_ITERATABLE
  Shortcut to \ref ALIB_ENUM_IS_ITERATABLE_BEGIN_END, providing <c>TEnum(0)</c> as macro
  parameter \p{StartElement}.

  Usually, this macro is placed in a header file, probably close to the enum type definition.
  However, it has to be placed <b>in global (no) namespace</b>.

  @param TEnum         Type of a scoped or non-scoped enumeration that is to be declared an
                       iteratable enum type.
  @param StopElement   The enum element after the last "valid" element in the enumeration.<br>
                       Will be used as expression for constexpr \alib{T_EnumIsIteratable::End}.

\def  ALIB_ENUM_IS_ITERATABLE_BEGIN_END
  Specializes type-traits struct \alib{enums,T_EnumIsIteratable} to implement methods:
  - \b %Begin to return \p{StartElement}
  - \b %End to return \p{StopElement}

  Usually, this macro is placed in a header file, probably close to the enum type definition.
  However, it has to be placed <b>in global (no) namespace</b>.

  \see Macro \ref ALIB_ENUM_IS_ITERATABLE

  @param TEnum        Type of a scoped or non-scoped enumeration that is to be declared an
                      iteratable enum type.
  @param StartElement The first element of the enumeration.<br>
                      Will be used as expression for constexpr \alib{T_EnumIsIteratable::End}.
  @param StopElement  The enum element after the last "valid" element in the enumeration.<br>
                      Will be used as expression for constexpr \alib{T_EnumIsIteratable::End}.


\~Comment ######################## T_EnumMetaDataSpecification  ############################## \~

\def ALIB_ENUM_SPECIFICATION_DECL
  Used to specialize \alib{resources,T_EnumMetaDataSpecification} for a certain type. The type
  may be a simple, empty struct, or any other type that is furtheron used to identify
  that specific enum meta data type.

  The specialization includes the declaration of a method that loads the tuple data from the
  resources. This method is to be implemented with \ref ALIB_ENUM_SPECIFICATION_IMPL.

  \see
    See documentation of TMP struct \alib{resources,T_EnumMetaDataSpecification} for more
    information and a step by step sample.

  @param TSpecific    Type denoting the specification of an enum meta data tuple type.
  @param ...          The elements of the tuple, excluding the initial integer.


\def ALIB_ENUM_SPECIFICATION_IMPL
  Implements the tuple resource loader method \alib{resources,T_EnumMetaDataSpecification::LoadTable}
  specialized with \ref ALIB_ENUM_SPECIFICATION_DECL. The latter macro also specializes
  \alib{resources,EnumMetaData::CheckLoad} which is using this method.

  \see
    See documentation of TMP struct \alib{resources,T_EnumMetaDataSpecification} for more
    information and a step by step sample.

  @param TSpecific    Type denoting the specification of an enum meta data tuple type.


\def ALIB_ENUM_SPECIFICATION
  Used to associate a custom enum type with a scheme of enum meta data that is in turn associated
  to given type \p{TSpecific}. Hence, this macro is used by software entities to enable its
  custom enum types to be usable with another software entity (library) that accepts enum elements
  with a certain meta data scheme.

  Along with the specialization of \alib{resources,T_EnumMetaDataSpecification}, the macro also
  comprises macros
  - \ref ALIB_ENUM_PRE_AND_POSTFIX (using fixed strings <c>"Prefix"</c> and <c>"Postfix"</c>
    as resource names, and
  - \ref ALIB_ENUM_READ_WRITE.

  In addition, \alib{resources,EnumMetaData::CheckLoad} is specialized for type \p{TEnum} to use
  method \alib{resources,T_EnumMetaDataSpecification::LoadTable} which has to be implemented
  using macro \ref ALIB_ENUM_SPECIFICATION_IMPL.

  It is good practice, that libraries provide an explicit shortcut to this macro, that omits
  parameter \p{TSpecific} and gives a more readable name adopted to the use case.
  Examples of this are macros \ref ALIB_EXCEPTIONS or \ref ALIB_CONFIG_VARIABLES.

  \see
    See documentation of TMP struct \alib{resources,T_EnumMetaDataSpecification} for more
    information and a step by step sample.

  @param TSpecific       Type denoting the specification of an enum meta data tuple type.
  @param TEnum           The enumeration type to specialize \p{%T_EnumMetaDataSpecification}
                         for.
@}
@}


\~Comment ##################     ALib Module Characters      ############################ \~

@addtogroup GrpALibMacros
@{

@name ALib Module Characters
\anchor GrpALibMacros_mod_characters
The macros in this section are introduced by module \alibmod_characters.

\~Comment -------------------------           ------------------------------------ \~
\def A_CHAR
  Macro used to express C++ character and string literals in a platform independent way.
  Dependent on code selection symbols \ref ALIB_CHARACTERS_ARE_NARROW and \ref ALIB_CHARACTERS_NATIVE_WCHAR,
  this macro possibly prepends character <c>'L'</c>, <c>'u'</c> or <c>'U'</c> to the
  character or string literal given with parameter \p{STR}.

  Whenever a software targets different platforms that change the underlying character width of
  the string types, the string literals have to change as well. To be able to compile on different
  platforms while using different compiler symbols to manipulate the character width, almost all string
  literals in \alib sources are enclosed by this macro. The exclamation are of-course such
  literals which are assigned to narrow string type \aworx{NString}, or those where explicit
  string types \aworx{WString} or \aworx{XString} are used.

  \note To avoid too much code clutter, this macro, as well as its siblings
        \ref A_CCHAR, \ref A_SCHAR, \ref A_NCHAR, \ref A_WCHAR and \ref A_XCHAR,
        have an abbreviated name, as they are quite frequently used.
        (According to the \ref alib_manual_appendix_naming "ALib naming scheme", the macros would
        be prefixed with <b>"ALIB_CHARACTERS_"</b>)

  \see For more information, consult chapter \ref alib_characters_prepro_literals
       of the \ref alib_mod_characters "Programmer's Manual" of module \alibmod_nolink_characters.

  @param STR The character or string literal to be eventually prefix with <c>'L'</c>, <c>'u'</c> or <c>'U'</c>.

\def A_CCHAR
  Macro used to express C++ string literals in a platform independent way. Dependent on
  the definition of type \alib{characters,complementChar} (which is in turn dependent on the platform, the
  compiler and optional compilation symbols), this macro defines string literals, which have either
  a one, two or four byte character width, namely the width corresponding to the width of
  \b %complementChar.

  \see Sibling macro \ref A_CHAR for more information.
       Further sibling macros are \ref A_SCHAR, \ref A_NCHAR, \ref A_WCHAR and \ref A_XCHAR.<br>
       Details are described in chapter \ref alib_characters_prepro_literals
       of the \ref alib_mod_characters "Programmer's Manual" of module \alibmod_nolink_characters.


   @param STR The character or string literal to eventually prefix with <c>'u'</c>, <c>'U'</c> or <c>'L'</c> .

\def A_SCHAR
  Macro used to express C++ string literals in a platform independent way. Dependent on
  the definition of type \alib{characters,strangeChar} (which is in turn dependent on the platform, the
  compiler and optional compilation symbols), this macro defines string literals, which have either
  a two or four byte character width, namely the width corresponding to the width of
  \b %complementChar.

  \note
    The same as type \alib{characters,strangeChar} is always equivalent to type \alib{characters,xchar},
    this macro is always equivalent to macro \ref A_XCHAR.

  \see Sibling macro \ref A_CHAR for more information.
       Further sibling macros are \ref A_CCHAR, \ref A_NCHAR, \ref A_WCHAR and \ref A_XCHAR.<br>
       Details are described in chapter \ref alib_characters_prepro_literals
       of the \ref alib_mod_characters "Programmer's Manual" of module \alibmod_nolink_characters.


   @param STR The character or string literal to prefix with <c>'u'</c>, <c>'U'</c> or <c>'L'</c> .



\def A_NCHAR
  This is an "ident macro" that just produces the given parameter \p{STR}. It is provided only for
  completeness. \alib does not use this macro internally, as string literals that are not surrounded
  by one of the character literal macros are very well identifiable as narrow literals.

  \see Sibling macro \ref A_CHAR for more information.
       Further sibling macros are \ref A_CCHAR, \ref A_SCHAR, \ref A_WCHAR and \ref A_XCHAR.<br>
       Details are described in chapter \ref alib_characters_prepro_literals
       of the \ref alib_mod_characters "Programmer's Manual" of module \alibmod_nolink_characters.

  @param STR The character or string literal that is returned as is.


\def A_WCHAR
  Macro used to express C++ string literals in a platform independent way. Dependent on
  the definition of type \alib{characters,wchar} (which is in turn dependent on the platform, the
  compiler and optional compilation symbols), this macro defines string literals, which have an either
  two bytes or four byte character width, namely the width corresponding to the width of
  \b %wchar.

  \see Sibling macro \ref A_CHAR for more information.
       Further sibling macros are \ref A_CCHAR, \ref A_SCHAR, \ref A_NCHAR and \ref A_XCHAR.<br>
       Details are described in chapter \ref alib_characters_prepro_literals
       of the \ref alib_mod_characters "Programmer's Manual" of module \alibmod_nolink_characters.


   @param STR The character or string literal to prefix with <c>'u'</c>, <c>'U'</c> or <c>'L'</c> .


\def A_XCHAR
  Macro used to express C++ string literals in a platform independent way. Dependent on
  the definition of type \alib{characters,xchar} (which is in turn dependent on the platform, the
  compiler and optional compilation symbols), this macro defines string literals, which have an either
  two bytes or four byte character width, namely the width corresponding to the width of
  \b %xchar.

  \note
    The same as type \alib{characters,strangeChar} is always equivalent to type \alib{characters,xchar},
    this macro is always equivalent to macro \ref A_SCHAR.

  \see Sibling macro \ref A_CHAR for more information.
       Further sibling macros are \ref A_CCHAR, \ref A_SCHAR, \ref A_NCHAR and \ref A_WCHAR.<br>
       Details are described in chapter \ref alib_characters_prepro_literals
       of the \ref alib_mod_characters "Programmer's Manual" of module \alibmod_nolink_characters.

   @param STR The character or string literal to prefix with <c>'u'</c>, <c>'U'</c> or <c>'L'</c> .

\def  ATMP_CHAR_COMPLEMENT
 Gives the complementary character type to the given type. This is specific to \alib
 character definitions. Converts
 - \aworx{character} to \aworx{complementChar}
 - \aworx{complementChar} to \aworx{character}


 \see
   For details, see TMP struct \alib{characters,TT_ComplementChar} as well as
   chapter \ref alib_characters_chars "2. Character Types" of the
   Programmer's Manual of module \alibmod_nolink_characters.

 @param  TChar The character type to convert to its complementary character.


\def ALIB_CHARACTER_ARRAY
  Specializes type traits struct \alib{characters,T_CharArray} for type \p{TString}.

  To implement the corresponding static methods in alignment with the specialized access and construction
  flags, macros
  \ref ALIB_CHARACTER_ARRAY_IMPL_BUFFER,
  \ref ALIB_CHARACTER_ARRAY_IMPL_LENGTH and
  \ref ALIB_CHARACTER_ARRAY_IMPL_CONSTRUCT are proposed to be used.

  \see
    For more information about character array traits, see chapter
    \ref alib_characters_arrays "4. Character Arrays" of  the Programmer's Manual of module \alibmod_characters.

  @param TString      The type to provide array type traits for.
  @param TChar        The character type of character arrays that \p{TString} represents or might be created of.
  @param Access       One of the values \b NONE, \b Implicit or \b ExplicitOnly.
                      Value \b Mutable is not permitted. Instead macro \ref ALIB_CHARACTER_ARRAY_MUTABLE
                      is to be used for that case.
  @param Construction One of the values \b NONE, \b Implicit or \b ExplicitOnly.


\def ALIB_CHARACTER_ARRAY_MUTABLE
  Specializes type traits struct \alib{characters,T_CharArray} for type \p{TString} with
  access modifier \b Mutable.

  To implement the corresponding static methods in alignment with the specialized access and construction
  flags, macros
  \ref ALIB_CHARACTER_ARRAY_IMPL_BUFFER_MUTABLE,
  \ref ALIB_CHARACTER_ARRAY_IMPL_LENGTH_MUTABLE and
  \ref ALIB_CHARACTER_ARRAY_IMPL_CONSTRUCT are proposed to be used.

  \see
    For more information about character array traits, see chapter
    \ref alib_characters_arrays "4. Character Arrays" of  the Programmer's Manual of module \alibmod_characters.

  @param TString      The type to provide array type traits for.
  @param TChar        The character type of character arrays that \p{TString} represents or might be created of.
  @param Construction One of the values \b NONE, \b Implicit or \b ExplicitOnly.


\def ALIB_CHARACTER_ZT_ARRAY
  Specializes type traits struct \alib{characters,T_ZTCharArray} for type \p{TString}.

  To implement the corresponding static methods in alignment with the specialized access and construction
  flags, macros
  \ref ALIB_CHARACTER_ZT_ARRAY_IMPL_BUFFER,
  \ref ALIB_CHARACTER_ZT_ARRAY_IMPL_LENGTH and
  \ref ALIB_CHARACTER_ZT_ARRAY_IMPL_CONSTRUCT are proposed to be used.

  \see
    For more information about character array traits, see chapter
    \ref alib_characters_arrays "4. Character Arrays" of  the Programmer's Manual of module \alibmod_characters.

  @param TString      The type to provide array type traits for.
  @param TChar        The character type of character arrays that \p{TString} represents or might be created of.
  @param Access       One of the values \b NONE, \b Implicit or \b ExplicitOnly.
                      Value \b Mutable is not permitted. Instead macro \ref ALIB_CHARACTER_ARRAY_MUTABLE
                      is to be used for that case.
  @param Construction One of the values \b NONE, \b Implicit or \b ExplicitOnly.


\def ALIB_CHARACTER_ZT_ARRAY_MUTABLE
  Specializes type traits struct \alib{characters,T_ZTCharArray} for type \p{TString} with
  access modifier \b Mutable.

  To implement the corresponding static methods in alignment with the specialized access and construction
  flags, macros
  \ref ALIB_CHARACTER_ZT_ARRAY_IMPL_BUFFER_MUTABLE,
  \ref ALIB_CHARACTER_ZT_ARRAY_IMPL_LENGTH_MUTABLE and
  \ref ALIB_CHARACTER_ZT_ARRAY_IMPL_CONSTRUCT are proposed to be used.

  \see
    For more information about character array traits, see chapter
    \ref alib_characters_arrays "4. Character Arrays" of  the Programmer's Manual of module \alibmod_characters.

  @param TString      The type to provide array type traits for.
  @param TChar        The character type of character arrays that \p{TString} represents or might be created of.
  @param Construction One of the values \b NONE, \b Implicit or \b ExplicitOnly.


\def ALIB_CHARACTER_ARRAY_IMPL_BUFFER
  This macro may be used to implement static method \alib{characters,T_CharArray::Buffer} of
  specializations of \b T_CharArray that have been defined using macro \ref ALIB_CHARACTER_ARRAY.

  If macro \ref ALIB_CHARACTER_ARRAY_MUTABLE was used, corresponding macro
  \ref ALIB_CHARACTER_ARRAY_IMPL_BUFFER_MUTABLE has to be used instead of this one.

  The argument providing a constant reference of type \p{TString} to the method's implementation, and
  which has to be accessed in the given implementation code, is named \p{src}.
  The implementation has to return a constant pointer to an array of character type \p{TChar}.

  @param TString      The type to provide the specialized static method for.
  @param TChar        The character type of character arrays that \p{TString} represents or might be created of.
  @param ...          The variadic arguments of the macro constitute the implementation code
                      of the method.

\def ALIB_CHARACTER_ZT_ARRAY_IMPL_BUFFER
  Same as \ref ALIB_CHARACTER_ARRAY_IMPL_BUFFER, but for zero-terminated character arrays.<br>
  (Implements method \alib{characters,T_ZTCharArray::Buffer} instead of
  \alib{characters,T_CharArray::Buffer}.)

  @param TString      The type to provide the specialized static method for.
  @param TChar        The character type of character arrays that \p{TString} represents or might be created of.
  @param ...          The variadic arguments of the macro constitute the implementation code
                      of the method.

\def ALIB_CHARACTER_ARRAY_IMPL_BUFFER_MUTABLE
  Alternative macro version of \ref ALIB_CHARACTER_ARRAY_IMPL_BUFFER, which declares
  method argument \p{src} as a mutual reference of type \p{TString}.

  This version is to be used if specialization was performed using
  \ref ALIB_CHARACTER_ARRAY_IMPL_BUFFER_MUTABLE.

  @param TString      The type to provide the specialized static method for.
  @param TChar        The character type of character arrays that \p{TString} represents or might be created of.
  @param ...          The variadic arguments of the macro constitute the implementation code
                      of the method.

\def ALIB_CHARACTER_ZT_ARRAY_IMPL_BUFFER_MUTABLE
  Same as \ref ALIB_CHARACTER_ARRAY_IMPL_BUFFER_MUTABLE, but for zero-terminated character arrays.<br>
  (Implements method \alib{characters,T_ZTCharArray::Buffer} instead of
  \alib{characters,T_CharArray::Buffer}.)

  @param TString      The type to provide the specialized static method for.
  @param TChar        The character type of character arrays that \p{TString} represents or might be created of.
  @param ...          The variadic arguments of the macro constitute the implementation code
                      of the method.

\def ALIB_CHARACTER_ARRAY_IMPL_LENGTH
  This macro may be used to implement static method \alib{characters,T_CharArray::Length} of
  specializations of \b T_CharArray that have been defined using macro \ref ALIB_CHARACTER_ARRAY.

  The argument providing a constant reference of type \p{TString} to the method's implementation, and
  which has to be accessed in the given implementation code, is named \p{src}.
  The implementation has to return the length of the character array as type \aworx{integer}.

  @param TString      The type to provide the specialized static method for.
  @param TChar        The character type of character arrays that \p{TString} represents or might be created of.
  @param ...          The variadic arguments of the macro constitute the implementation code
                      of the method.

\def ALIB_CHARACTER_ZT_ARRAY_IMPL_LENGTH
  Same as \ref ALIB_CHARACTER_ARRAY_IMPL_LENGTH, but for zero-terminated character arrays.<br>
  (Implements method \alib{characters,T_ZTCharArray::Length} instead of
  \alib{characters,T_CharArray::Length}.)

  @param TString      The type to provide the specialized static method for.
  @param TChar        The character type of character arrays that \p{TString} represents or might be created of.
  @param ...          The variadic arguments of the macro constitute the implementation code
                      of the method.

\def ALIB_CHARACTER_ARRAY_IMPL_LENGTH_MUTABLE
  Alternative macro version of \ref ALIB_CHARACTER_ARRAY_IMPL_LENGTH, which declares
  method argument \p{src} as a mutual reference of type \p{TString}.

  @param TString      The type to provide the specialized static method for.
  @param TChar        The character type of character arrays that \p{TString} represents or might be created of.
  @param ...          The variadic arguments of the macro constitute the implementation code
                      of the method.

\def ALIB_CHARACTER_ZT_ARRAY_IMPL_LENGTH_MUTABLE
  Same as \ref ALIB_CHARACTER_ARRAY_IMPL_LENGTH_MUTABLE, but for zero-terminated character arrays.<br>
  (Implements method \alib{characters,T_ZTCharArray::Length} instead of
  \alib{characters,T_CharArray::Length}.)

  @param TString      The type to provide the specialized static method for.
  @param TChar        The character type of character arrays that \p{TString} represents or might be created of.
  @param ...          The variadic arguments of the macro constitute the implementation code
                      of the method.

\def ALIB_CHARACTER_ARRAY_IMPL_CONSTRUCT
  This macro may be used to implement static method \alib{characters,T_CharArray::Construct} of
  specializations of \b T_CharArray that have been defined using macro \ref ALIB_CHARACTER_ARRAY
  or \ref ALIB_CHARACTER_ARRAY_MUTABLE.

  The arguments providing the array data to the method's implementation, which is to be used to
  create the object of type \p{TString}, are named \p{array} and \p{length}.
  The implementation has to return a value of type \p{TString}.

  @param TString      The type to provide the specialized static method for.
  @param TChar        The character type of character arrays that \p{TString} represents or might be
                      created of.
  @param ...          The variadic arguments of the macro constitute the implementation code
                      of the method.


\def ALIB_CHARACTER_ZT_ARRAY_IMPL_CONSTRUCT
  Same as \ref ALIB_CHARACTER_ARRAY_IMPL_CONSTRUCT, but for zero-terminated character arrays.<br>
  (Implements method \alib{characters,T_ZTCharArray::Construct} instead of
  \alib{characters,T_CharArray::Construct}.)

  @param TString      The type to provide the specialized static method for.
  @param TChar        The character type of character arrays that \p{TString} represents or might be
                      created of.
  @param ...          The variadic arguments of the macro constitute the implementation code
                      of the method.

@}
@}

\~Comment ##################      ALib Module Strings       ################################## \~

@addtogroup GrpALibMacros
@{

@name ALib Module Strings
\anchor GrpALibMacros_mod_strings
The macros in this section are introduced by module \alibmod_strings.

\def ALIB_STRINGS_APPENDABLE_TYPE
  Helper macro for specializing functor \alib{strings,T_Append} for type \p{TYPE}.
  This macro has to be positioned outside of any namespace and the given type has to include
  its full namespace qualification.

  This macro is to be used in combination with macro #ALIB_STRINGS_APPENDABLE_TYPE_DEF.<br>
  As an alternative to the two macros, #ALIB_STRINGS_APPENDABLE_TYPE_INLINE might be used, which
  will specialize \b T_Append and define its \b operator() inline.

  \see
    Chapter \ref alib_strings_assembly_ttostring of the Programmer's Manual of module
    \alibmod_strings.

  @param TYPE The type to specialize functor \b T_Append for.


\def ALIB_STRINGS_APPENDABLE_TYPE_N
  Same as \ref ALIB_STRINGS_APPENDABLE_TYPE but for character type \ref aworx::nchar.

  @param TYPE The type to specialize functor \b T_Append for.


\def ALIB_STRINGS_APPENDABLE_TYPE_W
  Same as \ref ALIB_STRINGS_APPENDABLE_TYPE but for character type \ref aworx::wchar.

  @param TYPE The type to specialize functor \b T_Append for.


\def ALIB_STRINGS_APPENDABLE_TYPE_DEF
  Macro used in combination with \ref ALIB_STRINGS_APPENDABLE_TYPE which specializes functor
  \alib{strings,T_Append} for type \p{TYPE} and standard character type, and with this declares its
  member \b operator().<br>
  This macro is used for the implementation of this member function.

  @param TYPE The type to specialize functor \b T_Append for.
  @param IMPL The implementation code for \b operator().


\def ALIB_STRINGS_APPENDABLE_TYPE_DEF_N
  Same as \ref ALIB_STRINGS_APPENDABLE_TYPE_DEF but for character type \ref aworx::nchar.

  @param TYPE The type to specialize functor \b T_Append for.
  @param IMPL The implementation code for \b operator().


\def ALIB_STRINGS_APPENDABLE_TYPE_DEF_W
  Same as \ref ALIB_STRINGS_APPENDABLE_TYPE_DEF but for character type \ref aworx::wchar.

  @param TYPE The type to specialize functor \b T_Append for.
  @param IMPL The implementation code for \b operator().


\def ALIB_STRINGS_APPENDABLE_TYPE_INLINE
  Helper macro for specializing functor \alib{strings,T_Append} for a custom type \p{TYPE}.
  This macro has to be positioned outside of any namespace and the given type has to include
  its full namespace qualification.

  With the specialization of struct, <b>T_Append<TYPE>::operator()</b> will be defined and
  implemented inline.

  Macros #ALIB_STRINGS_APPENDABLE_TYPE and #ALIB_STRINGS_APPENDABLE_TYPE_DEF
  provide a non-inline alternative to this macro.

  \see
    Chapter \ref alib_strings_assembly_ttostring of the Programmer's Manual of module
    \alibmod_strings.

  @param TYPE The type to specialize functor \b T_Append for.
  @param IMPL The implementation code for \b operator().


\def ALIB_STRINGS_APPENDABLE_TYPE_INLINE_N
  Same as \ref ALIB_STRINGS_APPENDABLE_TYPE_INLINE but for character type \ref aworx::nchar.

  @param TYPE The type to specialize functor \b T_Append for.
  @param IMPL The implementation code for \b operator().


\def ALIB_STRINGS_APPENDABLE_TYPE_INLINE_W
  Same as \ref ALIB_STRINGS_APPENDABLE_TYPE_INLINE but for character type \ref aworx::wchar.

  @param TYPE The type to specialize functor \b T_Append for.
  @param IMPL The implementation code for \b operator().


\def ALIB_STRINGS_SUPPRESS_STD_OSTREAM_OPERATOR
  Helper macro for specializing struct
  \alib{strings::compatibility::std,T_SuppressStdOstreamOperator} for a custom type \p{TYPE}.
  This macro has to be positioned outside of any namespace and the given type has to include
  its full namespace qualification.

  @param TYPE The type to specialize functor \b T_Append for.


\def  ALIB_STRING_DBG_CHK
  Simple macro that just invokes method _dbgCheck(), which is defined for classes
  \alib{strings,TString,String},
  \alib{strings,TCString,CString} and
  \alib{strings,TAString,AString}.
  It is active only when compiler symbol \ref ALIB_STRINGS_DEBUG is \c true.
  The macro is placed in almost every method.



\def  ALIB_STRINGS_TO_NARROW
  Creates a new local string variable of narrow character type.
  The name of the variable is defined by parameter \p{dest}.
  If code selection symbol \ref ALIB_CHARACTERS_ARE_NARROW is true, then \p{dest} becomes just a reference
  to \p{src}. The macro in this case is defined as:

        decltype(src)& dest= src;

  Otherwise, \p{dest} is of type \alib{strings,TLocalString,LocalString<nchar\,bufSize>}
  and \p{src} is passed to its constructor.

  @param src        The source string.
  @param dest       The name of the destination variable.
  @param bufSize    The local buffer size used for the conversion.

\def  ALIB_STRINGS_FROM_NARROW
  Creates a new local string variable of standard \alib{characters,character} type.
  The name of the variable is defined by parameter \p{dest}.
  If code selection symbol \ref ALIB_CHARACTERS_ARE_NARROW is true, then \p{dest} becomes just a reference
  to \p{src}. The macro in this case is defined as:

        decltype(src)& dest= src;

  Otherwise, \p{dest} is of type \alib{strings,TLocalString,LocalString<character\,bufSize>}
  and \p{src} is passed to its constructor.

  @param src        The source string.
  @param dest       The name of the destination variable.
  @param bufSize    The local buffer size used for the conversion.

\def  ALIB_STRINGS_TO_NARROW_ARG
  Used when \alib strings of standard character size should be passed as a string argument of narrow
  size.
  If code selection symbol \ref ALIB_CHARACTERS_ARE_NARROW is true, then the macro simply
  passes (is defined as) \p{src}.<br>
  Otherwise, the macro wraps \p{src} in an object of type
  \alib{strings,TLocalString,LocalString<nchar\,bufSize>}.

  @param src        The source string.
  @param bufSize    The local buffer size used for the conversion.

\def  ALIB_STRINGS_FROM_NARROW_ARG
  Used when \alib strings of narrow character size should be passed as a string argument of standard
  size.
  If code selection symbol \ref ALIB_CHARACTERS_ARE_NARROW is true, then the macro simply
  passes (is defined as) \p{src}.<br>
  Otherwise, the macro wraps \p{src} in an object of type
  \alib{strings,TLocalString,LocalString<character\,bufSize>}.
  @param src        The source string.
  @param bufSize    The local buffer size used for the conversion.


\def  ALIB_STRINGS_TO_WIDE
  Creates a new local string variable of wide character type.
  The name of the variable is defined by parameter \p{dest}.
  If code selection symbol \ref ALIB_CHARACTERS_ARE_NARROW is false, then \p{dest} becomes just a reference
  to \p{src}. The macro in this case is defined as:

        decltype(src)& dest= src;

  Otherwise, \p{dest} is of type \alib{strings,TLocalString,LocalString<nchar\,bufSize>}
  and \p{src} is passed to its constructor.

  @param src        The source string.
  @param dest       The name of the destination variable.
  @param bufSize    The local buffer size used for the conversion.

\def  ALIB_STRINGS_FROM_WIDE
  Creates a new local string variable of standard \alib{characters,character} type.
  The name of the variable is defined by parameter \p{dest}.
  If code selection symbol \ref ALIB_CHARACTERS_ARE_NARROW is false, then \p{dest} becomes just a reference
  to \p{src}. The macro in this case is defined as:

        decltype(src)& dest= src;

  Otherwise, \p{dest} is of type \alib{strings,TLocalString,LocalString<character\,bufSize>}
  and \p{src} is passed to its constructor.

  @param src        The source string.
  @param dest       The name of the destination variable.
  @param bufSize    The local buffer size used for the conversion.

\def  ALIB_STRINGS_TO_WIDE_ARG
  Used when \alib strings of standard character size should be passed as a string argument of wide
  size.
  If code selection symbol \ref ALIB_CHARACTERS_ARE_NARROW is false, then the macro simply
  passes (is defined as) \p{src}.<br>
  Otherwise, the macro wraps \p{src} in an object of type
  \alib{strings,TLocalString,LocalString<nchar\,bufSize>}.

  @param src        The source string.
  @param bufSize    The local buffer size used for the conversion.

\def  ALIB_STRINGS_FROM_WIDE_ARG
  Used when \alib strings of wide character size should be passed as a string argument of standard
  size.
  If code selection symbol \ref ALIB_CHARACTERS_ARE_NARROW is false, then the macro simply
  passes (is defined as) \p{src}.<br>
  Otherwise, the macro wraps \p{src} in an object of type
  \alib{strings,TLocalString,LocalString<character\,bufSize>}.

  @param src        The source string.
  @param bufSize    The local buffer size used for the conversion.

@}
@}


\~Comment ##################      ALib Module Boxing       ################################## \~

@addtogroup GrpALibMacros
@{

@name ALib Module Boxing
\anchor GrpALibMacros_mod_boxing
The macros in this section are introduced by module \alibmod_boxing.

\def  ALIB_BOXING_CUSTOMIZE

  Macro used to specialize template struct \alib{boxing,T_Boxer}, which customizes boxing for given
  boxable type \p{TSource} to be mapped to non-array type \p{TTarget}.

  Type definition \alib{boxing,T_Boxer::Mapping} is implemented by the macro to be
  \alib{boxing,TMappedTo,TMappedTo<TTarget>}.
  The implementations of methods \alib{boxing,T_Boxer::Write} and \alib{boxing,T_Boxer::Read}
  are to be provided with the variadic macro arguments.

  This macro belongs to set of sibling macros. For a customization of boxing the best
  suitable macro should be chosen. The set is
  - \b   ALIB_BOXING_CUSTOMIZE
  - \ref ALIB_BOXING_CUSTOMIZE_TYPE_MAPPING
  - \ref ALIB_BOXING_CUSTOMIZE_NOT_UNBOXABLE
  - \ref ALIB_BOXING_CUSTOMIZE_ARRAY_TYPE
  - \ref ALIB_BOXING_CUSTOMIZE_ARRAY_TYPE_NON_UNBOXABLE
  - \ref ALIB_BOXING_CUSTOMIZE_DENY_BOXING

  \see
     For more information, consult chapter \ref alib_boxing_customizing "7. Customizing Boxing"
     of the Programmer's Manual of module \alibmod_boxing.

     Two further macros exist:
      - \ref ALIB_BOXING_CUSTOMIZE_TYPE_MAPPING_CONSTEXPR
      - \ref ALIB_BOXING_CUSTOMIZE_NOT_UNBOXABLE_CONSTEXPR

     Details for the use of those are given in manual chapter \ref alib_boxing_more_opt_constexpr.

  @param TSource  The C++ 'source' type to specialize struct \alib{boxing,T_Boxer} for.
  @param TTarget  The target type to map \p{TSource} to.
  @param ...      Definition of \c static \c inline methods \alib{boxing,T_Boxer::Write} and
                  \alib{boxing,T_Boxer::Read}.


\def  ALIB_BOXING_CUSTOMIZE_TYPE_MAPPING

  Specializes template struct \alib{boxing,T_Boxer}.
  This version of \ref ALIB_BOXING_CUSTOMIZE "a set of sibling macros", is to be used when
  simple type mappings are to be performed between types that are statically castable, or
  when boxing as pointer should be enforced.

  The macro provides the implementations of all three entities of type traits struct \b T_Boxer:
  - Type \alib{boxing::T_Boxer,Mapping} is using \alib{boxing,TMappedTo,TMappedTo<TTarget>}.
  - Static method \alib{boxing::T_Boxer,Write} is defined to do static cast of the
    source value to the destination type and to then pass the result to
    \alib{boxing,Placeholder::Write}.
  - Static method \alib{boxing,T_Boxer::Read} is defined to read the mapped type
    using \alib{boxing,Placeholder::Read,Placeholder::Read<TTarget} and statically cast
    this to \p{TSource}.

  \see
    Macro \ref ALIB_BOXING_CUSTOMIZE for information about the sibling macros.

  @param TSource  The C++ 'source' type to specialize struct \alib{boxing,T_Boxer} for.
  @param TTarget  The target type to map \p{TSource} to.

\def  ALIB_BOXING_CUSTOMIZE_TYPE_MAPPING_CONSTEXPR

  Alternative version of macro \ref ALIB_BOXING_CUSTOMIZE_TYPE_MAPPING.
  Details for the use of this macro are given in manual chapter \ref alib_boxing_more_opt_constexpr.

  \see
    Macro \ref ALIB_BOXING_CUSTOMIZE for information about the sibling macros.

  @param TSource  The C++ 'source' type to specialize struct \alib{boxing,T_Boxer} for.
  @param TTarget  The target type to map \p{TSource} to.


\def  ALIB_BOXING_CUSTOMIZE_NOT_UNBOXABLE

  Specializes template struct \alib{boxing,T_Boxer}.
  This version of \ref ALIB_BOXING_CUSTOMIZE "a set of sibling macros", is to be used when
  a simple type mapping is to be performed for types \p{TSource} that are statically castable
  to \p{TTarget}.<br>
  In contrast to macro \ref ALIB_BOXING_CUSTOMIZE_TYPE_MAPPING, with this macro, unboxing
  the source type will be is denied.

  The macro provides the implementations of all three entities of type traits struct \b T_Boxer:
  - Type \alib{boxing::T_Boxer,Mapping} is using \alib{boxing,TMappedTo,TMappedTo<TTarget>}.
  - Static method \alib{boxing::T_Boxer,Write} is to do a static cast of the
    source value to the destination type and to then pass the result to
    \alib{boxing,Placeholder::Write}.
  - Static method \alib{boxing,T_Boxer::Read} is declared to return \c void.
    No implementation is given (as not needed).

  \see
    Macro \ref ALIB_BOXING_CUSTOMIZE for information about the sibling macros.

  @param TSource  The C++ 'source' type to specialize struct \alib{boxing,T_Boxer} for.
  @param TTarget  The target type to map \p{TSource} to.


\def  ALIB_BOXING_CUSTOMIZE_NOT_UNBOXABLE_CONSTEXPR

  Alternative version of macro \ref ALIB_BOXING_CUSTOMIZE_NOT_UNBOXABLE.
  Details for the use of this macro are given in manual chapter \ref alib_boxing_more_opt_constexpr.

  \see
    Macro \ref ALIB_BOXING_CUSTOMIZE for information about the sibling macros.

  @param TSource  The C++ 'source' type to specialize struct \alib{boxing,T_Boxer} for.
  @param TTarget  The target type to map \p{TSource} to.


\def  ALIB_BOXING_CUSTOMIZE_ARRAY_TYPE

  Specializes template struct \alib{boxing,T_Boxer}, to customize boxing for given
  boxable type \p{TSource} to be mapped to array type \p{TTarget[]}.

  Type definition \alib{boxing,T_Boxer::Mapping} is implemented by the macro to be
  \alib{boxing,TMappedToArrayOf,TMappedToArrayOf<TTarget>}.
  The implementations of methods \alib{boxing,T_Boxer::Write} and \alib{boxing,T_Boxer::Read}
  are to be provided with the variadic macro arguments.

  \see
    Macro \ref ALIB_BOXING_CUSTOMIZE for information about the sibling macros.

  @param TSource  The C++ 'source' type to specialize struct \alib{boxing,T_Boxer} for.
  @param TElement The element type of the array to map \p{TSource} to.
  @param ...      Definition of \c static \c inline methods \alib{boxing,T_Boxer::Write} and
                  \alib{boxing,T_Boxer::Read}.


\def  ALIB_BOXING_CUSTOMIZE_ARRAY_TYPE_NON_UNBOXABLE
  Specializes template struct \alib{boxing,T_Boxer}, to customize boxing for given
  boxable type \p{TSource} to be mapped to array type \p{TTarget[]}.

  Type definition \alib{boxing,T_Boxer::Mapping} is implemented by the macro to be
  \alib{boxing,TMappedToArrayOf,TMappedToArrayOf<TTarget>}.<br>
  Static method \alib{boxing,T_Boxer::Read} is declared to return \c void.
  No implementation is given (as not needed).<br>
  The implementation of method \alib{boxing,T_Boxer::Write} are to be provided with the variadic
  macro arguments.

  \see
    Macro \ref ALIB_BOXING_CUSTOMIZE for information about the sibling macros.

  @param TSource  The C++ 'source' type to specialize struct \alib{boxing,T_Boxer} for.
  @param TElement The element type of the array to map \p{TSource} to.
  @param ...      Definition of \c static \c inline method \alib{boxing,T_Boxer::Write}.

\def  ALIB_BOXING_CUSTOMIZE_DENY_BOXING
  Specializes template struct \alib{boxing,T_Boxer}, to completely forbid boxing and unboxing
  of type \p{TSource}.

  For this, type definition \alib{boxing,T_Boxer::Mapping} is implemented by the macro to be
  \alib{boxing,TMappedTo,TMappedTo<TNotBoxable>} and just declarations of static methods
  \alib{boxing,T_Boxer::Write} and \alib{boxing,T_Boxer::Read} are given.<br>
  The latter is declared to return \c void. Note that this in principle is not necessary, because
  using \alib{boxing,detail::TNotBoxable} already forbids unboxing. Nevertheless, this way
  helper struct \alib{boxing,TT_IsLocked} is of \c std::true_type for \p{TSource} as well.

  \see
    Macro \ref ALIB_BOXING_CUSTOMIZE for information about the sibling macros.

  @param TSource  The type that should be denied to be used with \alibmod_nolink_boxing.



\def  ALIB_BOXING_VTABLE_DECLARE
  Declares an \c extern object of type \alib{boxing::detail,VTable} named \p{TMapped} in
  namespace \ref aworx::lib::boxing::detail.<br>
  Furthermore specializes template struct \alib{boxing,detail::T_VTableFactory} for type
  \alib{boxing,TMappedTo,TMappedTo<TMapped>} to have its method \b Get return the object named
  \p{Identifier}.

  This macro has to be placed in a header included by each compilation unit that
  creates or access boxes of type \p{TMapped}.

  \see
    Chapter \ref alib_boxing_more_opt_staticvt of the \ref alib_mod_boxing "Programmer's Manual"
    of module \alibmod_nolink_boxing.

  @param TMapped     The mapped type to declare a \e vtable singleton for.
  @param Identifier  The identifier name of the \e vtable singleton.


\def  ALIB_BOXING_VTABLE_DECLARE_ARRAYTYPE
  Same as \ref ALIB_BOXING_VTABLE_DECLARE, but used with mapped array types.
  Specializes \alib{boxing,detail::T_VTableFactory} for type
  \alib{boxing,TMappedToArrayOf,TMappedToArrayOf<TMapped>}, instead of \b TMappedTo,

  @param TMapped     The mapped type to declare a \e vtable singleton for.
  @param Identifier  The identifier name of the \e vtable singleton.


\def  ALIB_BOXING_VTABLE_DEFINE
  Defines the external object declared with \ref ALIB_BOXING_VTABLE_DECLARE.

  This macro has to be placed in a compilation unit.

  @param TMapped     The mapped type to define a \e vtable singleton for.
  @param Identifier  The identifier name of the \e vtable singleton.


\def  ALIB_BOXING_VTABLE_DEFINE_ARRAYTYPE
  Defines the external object declared with \ref ALIB_BOXING_VTABLE_DECLARE_ARRAYTYPE.

  This macro has to be placed in a compilation unit.

  @param TMapped     The mapped type to define a \e vtable singleton for.
  @param Identifier  The identifier name of the \e vtable singleton.


\def  ALIB_BOXING_VTABLE_REGISTER
  Registers a statically created \e vtable singleton declared with either
  \ref ALIB_BOXING_VTABLE_DECLARE or \ref ALIB_BOXING_VTABLE_DECLARE_ARRAYTYPE.

  This macro has to be placed in the \ref alib_manual_bootstrapping "bootstrap code" of a software.
  In debug-compilations, this macro is empty.
  \see
    Chapter \ref alib_boxing_more_opt_staticvt of the \ref alib_mod_boxing "Programmer's Manual"
    of module \alibmod_nolink_boxing.

  @param Identifier  The identifier name of the \e vtable singleton.



\def  ALIB_BOXING_DEFINE_FEQUALS_FOR_COMPARABLE_TYPE
  This macro \alib{boxing,Register,registers} templated box-function
  \alib{boxing,FEquals::ComparableTypes} for given mapped type \p{TComparable}.

  If a type is boxed as pointer type, then \p{TComparable} has to be given as pointer type.
  For comparison, the unboxed pointers will be dereferenced. If both are \e nulled, \c true
  is returned, if one is \e nulled, \c false.

  As all function registrations have to be performed at run-time, this macro is to be placed in the
  \ref alib_manual_bootstrapping "bootstrap section" of an application.


  @param TComparable  The comparable type name.


\def  ALIB_BOXING_DEFINE_FISLESS_FOR_COMPARABLE_TYPE
  This macro \alib{boxing,Register,registers} templated box-function
  \alib{boxing,FIsLess::ComparableTypes} for given type \p{TComparable}.

  If a type is boxed as pointer type, then \p{TComparable} has to be given as pointer type.
  For comparison, the unboxed pointers will be dereferenced. If both are \e nulled, \c false
  is returned, if only \p{lhs} is \e nulled, \c true and if only \p{rhs} is \e nulled, then
  \c false.

  As all function registrations have to be performed at run-time, this macro is to be placed in the
  \ref alib_manual_bootstrapping "bootstrap section" of an application.

  @param TComparable  The comparable type name.


\def  ALIB_BOXING_REGISTER_FAPPEND_FOR_APPENDABLE_TYPE

  This macro registers templated box-function implementation \alib{boxing,FAppend::Appendable}
  for the given type \p{TAppendable}.

  The macro is to be placed in the bootstrap section of an application, for any type that is
  \ref alib_strings_assembly_ttostring "appendable" to class \b %AString.

  This macro selects version box-function type <b>%FAppend\<character\></b>.
  If a custom type is appendable to two or three underlying character types of class \b %AString,
  then macros
  - \ref ALIB_BOXING_REGISTER_FAPPEND_FOR_APPENDABLE_TYPE_N,
  - \ref ALIB_BOXING_REGISTER_FAPPEND_FOR_APPENDABLE_TYPE_W and
  - \ref ALIB_BOXING_REGISTER_FAPPEND_FOR_APPENDABLE_TYPE_X

  should be used. Note that for each character type of \alibmod_nolink_strings, a different
  box-function is registered.

  \note
    As by default, custom types get boxed as pointers, the type in question usually has to be
    provided here as pointer type, for example:

           ALIB_BOXING_REGISTER_FAPPEND_FOR_APPENDABLE_TYPE( my_namespace::MyType* )

  @param TAppendable  The appendable type.


\def  ALIB_BOXING_REGISTER_FAPPEND_FOR_APPENDABLE_TYPE_N
  Same as macro \ref ALIB_BOXING_REGISTER_FAPPEND_FOR_APPENDABLE_TYPE but implements
  interface \b FAppend<nchar> instead of \b FAppend<character>.

  @param TAppendable  The appendable type.


\def  ALIB_BOXING_REGISTER_FAPPEND_FOR_APPENDABLE_TYPE_W
  Same as macro \ref ALIB_BOXING_REGISTER_FAPPEND_FOR_APPENDABLE_TYPE but implements
  interface \b FAppend<wchar> instead of \b FAppend<character>.

  @param TAppendable  The appendable type.


\def  ALIB_BOXING_REGISTER_FAPPEND_FOR_APPENDABLE_TYPE_X
  Same as macro \ref ALIB_BOXING_REGISTER_FAPPEND_FOR_APPENDABLE_TYPE but implements
  interface \b FAppend<xchar> instead of \b FAppend<character>.

  @param TAppendable  The appendable type.

@}
@}

\~Comment ##################     ALib Module Resources      ############################ \~

@addtogroup GrpALibMacros
@{

@name ALib Module Resources
\anchor GrpALibMacros_mod_resources
The macros in this section are introduced by module \alibmod_resources.


\def  ALIB_RESOURCES_DEFINE
   Macro used to specialize type-traits struct \alib{resources,T_Resourced,T_Resourced<TResourced>}
   for given type \p{TResourced}.

   This macro is for example used with \alib{resources,T_EnumMetaDataDecl,ALib enum meta data}.

   As a frequently used alternative, macro \ref ALIB_RESOURCED_IN_MODULE defines resources
   which are located in a module.


   @param TResourced        The type to specialize TMP struct \b %T_Resourced for.
   @param Resources         A pointer to the \alib{resources,Resources} object.
   @param ResourceCategory  The category of the resources.
   @param ResourceName      The name of the resource.

\def  ALIB_RESOURCED_IN_MODULE
   Macro used to specialize type-traits struct \alib{resources,T_Resourced,T_Resourced<TResourced>}
   for given type \p{TResourced}. This macro is a common alternative to \ref ALIB_RESOURCES_DEFINE
   and is used in the frequent case that the resources for a type are residing in the
   \alib{resources,Resources} associated with the a singleton of \alib{Module}.
   Instead of the \b %Resources object and the category name, the type of the derived \b %Module
   class is given with this alternative. Both values then are received from the singleton instance
   of the type.

   @param TResourced    The type to specialize type-traits struct \b %T_Resourced for.
   @param TModule       The type of the module that holds the resources for \p{TREsourced}.
   @param ResourceName  The name of the resource.


@}
@}

\~Comment ##################     ALib Module Results      ############################ \~

@addtogroup GrpALibMacros
@{

@name ALib Module Resources
\anchor GrpALibMacros_mod_results
The macro in this section is introduced by module \alibmod_results.

\def  ALIB_EXCEPTIONS
   Macro used to declare enumeration type \p{TEnum} to be compatible with class
   \b %Exception.

   Parameters \p{TModule} and \p{ResourceName} are forwarded to macro \ref ALIB_RESOURCED_IN_MODULE.

   \see Class \alib{results,Exception} for details.

   @param TEnum            The enumeration type that is to be declared as an error code compatible
                           with class \alib{results,Exception}.
   @param TModule          The type of the module that holds the resources for \p{TEnum}.
   @param ResourceName     The resource name of the meta information of the \p{TEnum}.

@}
@}


\~Comment ##################      ALib Module Configuration       ################################## \~

@addtogroup GrpALibMacros
@{

@name ALib Module Configuration
\anchor GrpALibMacros_mod_config
The macro in this section is introduced by module \alibmod_config.

\def  ALIB_CONFIG_VARIABLES
  Macro used to declare enumeration type \p{TEnum} to denote
  \ref aworx::lib::config "ALib Configuration Variables".
  In particular, the macro includes the following code:
  - Uses macro  \ref ALIB_RESOURCED_IN_MODULE and passes parameters \p{TModule} and \p{ResourceName}.
  - Specializes TMP struct \alib{resources,T_EnumMetaDataDecl} for type \p{TEnum} and associate
    type \alib{config,VariableDecl::TTuple} for its meta data. For this, macro
    \ref ALIB_ENUM_SPECIFICATION is used, which also:
  - Specializes method \alib{resources,EnumMetaData::CheckLoad} to use a detail method
    for loading the meta data from the resources.

  With this - and the corresponding resource data! - in place, elements of \p{TEnum} can be
  used to declare configuration variables by passing them to one of following constructors and
  methods:
  - \alib{config,VariableDecl::VariableDecl(TEnum)}
  - \alib{config,Variable::Variable(TEnum)}
  - \alib{config,Variable::Variable(TEnum),Variable::Variable(TEnum\,const StringTypes&...)}
  - \alib{config,Variable::Declare(TEnum)}
  - \alib{config,Variable::Declare(TEnum),Variable::Declare(TEnum\,const StringTypes&...)}

  The resource data is a table of values separated by character <b>'|'</b> ("pipe" character), which
  has to contain the eight values of tuple type \alib{config,VariableDecl::TTuple}. Elements
  \c 3 ("DefaultValue") and \c 7 ("Comments"), in the resources are interpreted as a
  resource name. This way, both values are loaded from separated resource strings.
  This has the following advantages:
  - The values may contain the separation character <b>'|'</b>.
  - The values can be manipulated within the resources more easily.

  Note that for loading the resources, static template method
  \alib{resources,ResourcedTupleLoader::LoadTable} is used.
  As documented, this method (optionally) allows to separate each variable declaration entry
  into an own, numbered resource string.


  \see
     \ref alib_mod_config "Programmer's Manual" of module \alibmod_nolink_config for information
     on configuration data and corresponding variables.

  @param TEnum            The enumeration type that is to be declared for denoting configuration
                          variables.
  @param TModule          The type of the module that holds the resources for \p{TEnum}.
  @param ResourceName     The resource name of the meta information of the \p{TEnum}.

@}
@}



\~Comment ##################    ALox Low Level Macros    ################################## \~

@addtogroup GrpALibMacros
@{

@name ALox Low level Macros
\anchor GrpALibMacros_mod_alox_lowlevel

The preprocessor macros listed here are the foundation for
\ref GrpALibMacros_mod_alox_debug "debug logging" and
\ref GrpALibMacros_mod_alox_release "release logging" macros introduced below.

Developers that use \alox in standard use cases do not need to know and use the macros listed here.

@{

\def  LOG_LOX
  The Lox instance used by all debug logging macros. This can be overwritten (prior or after
  including alox.hpp) to allow different instances of class Lox for debug logging within
  different source entities. However, other ways to structure log output and to separate
  log information into different streams exists in \alox and overwriting this macro is not
  recommended for standard use cases.<p>

  Note: The definition must provide a reference (not a pointer) to the \b %Lox object.

\def  LOX_LOX
  The Lox instance used by all release logging macros. This has to be set (prior or after
  including alox.hpp) to provide access to a, dedicated instance of class Lox created for
  release logging within a software.<br>
  It is of-course allowed to use different instances within different source entities.
  However, other ways to structure log output and separate log streams exists in \alox and should
  be evaluated prior to introducing different instances of class Lox.<p>

  Note: The definition must provide a reference (not a pointer) to the \b %Lox object.

\def  LOG_CI
  Dependent on #ALOX_DBG_LOG_CI, this macro provides comma delimited source information
  (sourcefile, line number, function name) or corresponding \c null values.

\def  LOX_CI
  Dependent on #ALOX_REL_LOG_CI, this macro provides comma delimited source information
  (sourcefile, line number, function name) or corresponding \c null values.


\def  LOG_ACQUIRE
  Macro that is placed at the beginning of almost all \ref GrpALibMacros_mod_alox_debug "debug logging macros".
  Provides scope information (provided that \ref ALOX_DBG_LOG_CI is set) to the lox and places
  the debug lox instance access code using \ref LOG_LOX.

\def  LOG_RELEASE
  Macro that is placed at the end of almost all \ref GrpALibMacros_mod_alox_debug "debug logging macros".
  Releases the lox which was acquired when passing scope information (in macro \ref LOG_ACQUIRE.).


\def  LOX_ACQUIRE
  Macro that is placed at the beginning of almost all \ref GrpALibMacros_mod_alox_release "release logging macros".
  Provides scope information (provided that \ref ALOX_REL_LOG_CI is set) to the lox and places
  the release lox instance access code using \ref LOX_LOX.

\def  LOX_RELEASE
  Macro that is placed at the end of almost all \ref GrpALibMacros_mod_alox_release "release logging macros"..
  Releases the lox which was acquired when passing scope information (in macro \ref LOG_ACQUIRE.).

@}
@}


\~Comment ##################   ALox Macros For Debug Logging     ################################## \~

@addtogroup GrpALibMacros
@{

@name ALox Macros For Debug Logging
\anchor GrpALibMacros_mod_alox_debug
The macros listed here, are provided to place debug <em>Log Statements</em> within source code
using module \alibmod_alox.
Besides that, macros controlling and setting preferences for \alox exists.<p>

The exclusive use of these macros should be sufficient to support most of common debug logging
statements with \alox. Should some functionality be not available easily with using the macros,
of-course, the normal C++ API of \alox can be used in parallel to using the macros.
For proper pruning of code that is using the C++ API, such code has to be enclosed by<br>
\verbatim
#if ALOX_DBG_LOG
   ...
#endif
\endverbatim
lines, or embedded in macro \ref Log_Prune.
\note To be clear: When using the macros, the <em>\#if / \#endif</em> statements are \e not needed!

All macro names are prefixed "Log_". This implies that they are macros to implement *debug*
logging. In contrast to this, a set of similar macros exists for release logging
(see \ref GrpALibMacros_mod_alox_release "release logging macros"). Those are
prefixed "Lox_". (The choice of the prefixes *Log_* and *Lox* provide  maximum source code
compatibility of <b>%ALox for C++</b> log lines in comparison to ALox for C# and ALox for Java.<p>

Most macros make use of the macro \ref LOG_LOX, which references a singleton
object of class \ref aworx::lib::lox::Lox "Lox" that is used for all debug logging.
This singleton concept covers most
uses cases for debug logging. If more flexibility is wanted, then either macro
\ref LOG_LOX might be changed for different compilation units or the <b>%ALox for C++ API</b>
might be used instead of the macros listed here.

\note The <em>Scope Domain</em> mechanism of \alox, as well as other \alox functionality
which relies on \e Scopes use the information provided by \alib macro \ref ALIB_CALLER.
Changing this macro, might cause these mechanism to fail.


\def  Log_Prune
  This very simple macro is used for pruning debug <em>Log Statements</em>.
  While it is used as a building block of all other macros for debug logging, for code entities
  using \alox, it provides an easy way to prune code lines that get inserted purely to support
  logging, e.g. to create \alox loggers or to prepare more complex log output. (The alternative
  way is to enclose such code within
  <code> \#ifdef ALOX_DBG_LOG </code> / <code> \#endif </code> preprocessor lines.
  <p>

  Depends on \ref ALOX_DBG_LOG. If this is set, the macro just copies the code provided, else it
  does not copy it, hence removes the code.


\def Log_SetSourcePathTrimRule
  Invokes \alox{Lox::SetSourcePathTrimRule} on the debug singleton of class Lox defined in macro \ref LOG_LOX.
  @param ...  The parameters to pass.


\def Log_ClearSourcePathTrimRules
  Invokes \alox{Lox::ClearSourcePathTrimRules} on the debug singleton of class Lox defined in macro \ref LOG_LOX.
  @param ...  The parameters to pass.


\def Log_AddDebugLogger
  Invokes \alox{Log::AddDebugLogger} to create, add and configure a default debug logger suitable for the platform and toolset.
  @param ...  The parameters to pass.


\def Log_RemoveDebugLogger
  Invokes \alox{Log::RemoveDebugLogger} to remove and delete a debug logger created by \ref aworx::lib::lox::Log::AddDebugLogger "Log::AddDebugLogger".
  @param ...  The parameters to pass.


\def Log_GetLogger
  Invokes \alox{Lox::GetLogger} on the debug singleton of class Lox defined in macro \ref LOG_LOX.
  @param identifier  The identifier name of the variable that receives the pointer to the logger.
  @param name        The name of the logger to retrieve.


\def Log_RemoveLogger
  Invokes \alox{Lox::RemoveLogger} on the debug singleton of class Lox defined in macro \ref LOG_LOX.
  @param logger  Either the name of or a pointer to the logger to remove.


\def Log_SetDomain
  Invokes \alox{Lox::SetDomain} on the debug singleton of class Lox defined in macro \ref LOG_LOX.
  @param ...  The parameters to pass.


\def Log_RemoveThreadDomain
  Invokes \alox{Lox::RemoveThreadDomain} on the debug singleton of class Lox defined in macro \ref LOG_LOX.
  @param ...  The parameters to pass.


\def Log_SetDomainSubstitutionRule
  Invokes \alox{Lox::SetDomainSubstitutionRule} on the debug singleton of class Lox defined in macro \ref LOG_LOX.
  @param ...  The parameters to pass.


\def Log_SetVerbosity
  Invokes one of the overloaded methods \alox{Lox::SetVerbosity} on the debug singleton of class Lox defined in macro \ref LOG_LOX.
  @param ...  The parameters to pass.


\def Log_SetStartTime
  Invokes \alox{Lox::SetStartTime} on the debug singleton of class Lox defined in macro \ref LOG_LOX.
  @param ...  The parameters to pass.


\def Log_MapThreadName
  Invokes \alox{Lox::MapThreadName} on the debug singleton of class Lox defined in macro \ref LOG_LOX.
  @param ...  The parameters to pass.


\def Log_LogState
  Invokes \alox{Lox::State} on the debug singleton of class Lox defined in macro \ref LOG_LOX.
  @param ...  The parameters to pass.


\def Log_Verbose
  Invokes \alox{Lox::Verbose} on the debug singleton of class Lox defined in macro \ref LOG_LOX.
  @param ...  The parameters to pass.


\def Log_Info
  Invokes \alox{Lox::Info} on the debug singleton of class Lox defined in macro \ref LOG_LOX.
  @param ...  The parameters to pass.


\def Log_Warning
  Invokes \alox{Lox::Warning} on the debug singleton of class Lox defined in macro \ref LOG_LOX.
  @param ...  The parameters to pass.


\def Log_Error
  Invokes \alox{Lox::Error} on the debug singleton of class Lox defined in macro \ref LOG_LOX.
  @param ...  The parameters to pass.


\def Log_Assert
  Invokes \alox{Lox::Assert} on the debug singleton of class Lox defined in macro \ref LOG_LOX.
  @param ...  The parameters to pass.


\def Log_If
  Invokes \alox{Lox::If} on the debug singleton of class Lox defined in macro \ref LOG_LOX.
  @param ...  The parameters to pass.


\def Log_Once
  Invokes \alox{Lox::Once} on the debug singleton of class Lox defined in macro \ref LOG_LOX.
  @param ...  The parameters to pass.


\def Log_Entry
  Invokes \alox{Lox::Entry} on the debug singleton of class Lox defined in macro \ref LOG_LOX.
  @param ...  The parameters to pass.


\def Log_SetPrefix
  Invokes \alox{Lox::SetPrefix} on the debug singleton of class Lox defined in macro \ref LOG_LOX.
  @param ...  The parameters to pass.


\def Log_Store
  Invokes \alox{Lox::Store} on the debug singleton of class Lox defined in macro \ref LOG_LOX.
  @param ...  The parameters to pass.


\def Log_Retrieve
  Invokes \alox{Lox::Retrieve} on the debug singleton of class Lox defined in macro \ref LOG_LOX.
  @param ident The identifier name of the \alib{boxing,Box} object to take the retrieved data.
  @param ...   The parameters to pass.


\def Log_Exception
  Invokes \alox{LogTools::Exception} providing the debug singleton of class Lox defined in macro \ref LOG_LOX.
  @param ...  The parameters to pass.


@}
@}




\~Comment #################   ALox Macros For Release Logging   ################################ \~

@addtogroup GrpALibMacros
@{

@name ALox Macros For Release Logging
\anchor GrpALibMacros_mod_alox_release
The macros listed here, are provided to place release <em>Log Statements</em> within source code
using module \alibmod_alox. Besides that, macros controlling and setting preferences for ALox exists.<p>

The exclusive use of these macros should be sufficient to support most of common release logging
statements with \alox. Should some functionality be not available easily using the macros,
of-course, the normal C++ API of \alox can be used in parallel to using the macros.
Code that is using the C++ API might be enclosed by<br>
\verbatim
#if ALOX_REL_LOG
   ...
#endif
\endverbatim
lines, to remove them when compiling a release version of the software unit with pruned
release log macros. Alternatively, such code might be embedded in macro \ref Lox_Prune.
(Such compilation would be made by passing \ref ALOX_REL_LOG_OFF to the
compiler and could be useful in certain situations.) <p>

Prior to using the macros, each code entity has to set the preprocessor macro \ref LOX_LOX
This can be done in a general header file of the software,
(e.g. the same that exposes the release-Lox object to that source), or, in more complex
scenarios with more than one release-Lox object, at any other appropriate source location.

All macro names are prefixed with the term <b>Lox_</b>. This implies that they are macros to
implement <em>release logging</em>. In contrast to this, a set of similar macros exists for
<em>debug logging</em> (see \ref GrpALibMacros_mod_alox_debug "debug logging macros"). Those are
prefixed <b>Log_</b>.
\note The choice of the prefixes <b>Log_</b> and <b>Lox_</b> was made to provide  maximum source
code compatibility of <b>%ALox for C++</b> log lines in comparison to other ALox implementations
in other programming languages, which provide a class Log as a kind of 'mirror' class of
class Lox. Invocations to class Log get pruned in these languages. <p>

Most macros make use of the macro \ref LOX_LOX, which references a singleton
object of class \ref aworx::lib::lox::Lox "Lox" that is used for all release logging.
This singleton concept covers most
uses cases for release logging. If more flexibility is wanted, then either the macro
\ref LOX_LOX might be changed for different compilation units or the <b>%ALox C++ API</b>
might be used instead of the macros listed here.


\def  Lox_Prune
  This very simple macro is used for pruning release <em>Log Statements</em> in the moment release logging
  gets disabled (what in standard release scenarios is not done).<p>

  While it is used as a building block of all other macros for release logging, for code entities
  using \alox, it provides an easy way to prune code lines that get inserted purely to support
  logging, e.g. to create \alox loggers or to prepare more complex log output. (The alternative
  way is to enclose such code within
  <code> \#ifdef ALOX_REL_LOG </code> / <code> \#endif </code> preprocessor lines.
  <p>

  Depends on \ref ALOX_REL_LOG. If this is set, the macro just copies the code provided, else it
  does not copy it, hence removes the code.

  @param ...  The code to prune.

\def Lox_SetSourcePathTrimRule
  Invokes \alox{Lox::SetSourcePathTrimRule} on the object of type Lox defined in macro \ref LOX_LOX.
  @param ...  The parameters to pass.


\def Lox_ClearSourcePathTrimRules
  Invokes \alox{Lox::ClearSourcePathTrimRules} on the object of type Lox defined in macro \ref LOX_LOX.
  @param ...  The parameters to pass.


\def Lox_GetLogger
  Invokes \alox{Lox::GetLogger} on the object of type Lox defined in macro \ref LOX_LOX.
  @param identifier  The identifier name of the variable that receives the pointer to the logger.
  @param name        The name of the logger to retrieve.


\def Lox_RemoveLogger
  Invokes \alox{Lox::RemoveLogger} on the object of type Lox defined in macro \ref LOX_LOX.
  @param logger  Either the name of or a pointer to the logger to remove.


\def Lox_SetDomain
  Invokes \alox{Lox::SetDomain} on the object of type Lox defined in macro \ref LOX_LOX.
  \attention
    If \ref ALOX_REL_LOG_CI is not set, which is the default for release logging, and when used with language-related
    \e Scopes, this method will log an internal warning and will not be effective in respect to
    \e %Scope::Path, \e %Scope::Filename, and \e %Scope::Method.
    See [ALox User Manual](https://alexworx.github.io/ALox-Logging-Library/manual.html) for
    detailed information.

    If Scope Domains based on source-related scopes should be supported in release logging, the
    software entity has to be compiled with precompiler symbol \ref ALOX_REL_LOG_CI_ON.
    Note that one effect of setting this symbol is, that information on source code paths and file names, as well as
    method names make their way into the release executable. This may not be wanted.

  @param ...  The parameters to pass.

\def Lox_RemoveThreadDomain
  Invokes \alox{Lox::RemoveThreadDomain} on the object of type Lox defined in macro \ref LOX_LOX.
  @param ...  The parameters to pass.


\def Lox_SetDomainSubstitutionRule
  Invokes \alox{Lox::SetDomainSubstitutionRule} on the object of type Lox defined in macro \ref LOX_LOX.
  @param ...  The parameters to pass.


\def Lox_SetVerbosity
  Invokes one of the overloaded methods \alox{Lox::SetVerbosity} on the object of type Lox defined in macro \ref LOX_LOX.
  @param ...  The parameters to pass.


\def Lox_SetStartTime
  Invokes \alox{Lox::SetStartTime} on the object of type Lox defined in macro \ref LOX_LOX.
  @param ...  The parameters to pass.


\def Lox_MapThreadName
  Invokes \alox{Lox::MapThreadName} on the object of type Lox defined in macro \ref LOX_LOX.
  @param ...  The parameters to pass.


\def Lox_LogState
  Invokes \alox{Lox::State} on the object of type Lox defined in macro \ref LOX_LOX.
  @param ...  The parameters to pass.


\def Lox_Verbose
  Invokes \alox{Lox::Verbose} on the object of type Lox defined in macro \ref LOX_LOX.
  @param ...  The parameters to pass.


\def Lox_Info
  Invokes \alox{Lox::Info} on the object of type Lox defined in macro \ref LOX_LOX.
  @param ...  The parameters to pass.


\def Lox_Warning
  Invokes \alox{Lox::Warning} on the object of type Lox defined in macro \ref LOX_LOX.
  @param ...  The parameters to pass.


\def Lox_Error
  Invokes \alox{Lox::Error} on the object of type Lox defined in macro \ref LOX_LOX.
  @param ...  The parameters to pass.


\def Lox_Assert
  Invokes \alox{Lox::Assert} on the object of type Lox defined in macro \ref LOX_LOX.
  @param ...  The parameters to pass.


\def Lox_If
  Invokes \alox{Lox::If} on the object of type Lox defined in macro \ref LOX_LOX.
  @param ...  The parameters to pass.


\def Lox_Once
  Invokes \alox{Lox::Once} on the object of type Lox defined in macro \ref LOX_LOX.
  @param ...  The parameters to pass.


\def Lox_Entry
  Invokes \alox{Lox::Entry} on the object of type Lox defined in macro \ref LOX_LOX.
  @param ...  The parameters to pass.



\def Lox_Store
  Invokes \alox{Lox::Store} on the object of type Lox defined in macro \ref LOX_LOX.
  \attention
    If \ref ALOX_REL_LOG_CI is not set, which is the default for release logging
    statements, Log Data can not be used in conjunction with language-related \e Scopes.<br>
    If <em>Log Data</em> should be supported in release logging, the software entity has to be compiled
    with precompiler symbol \ref ALOX_REL_LOG_CI_ON. Note that one effect of setting
    this symbol is, that information on source code paths and file names, as well as
    method names make their way into the release executable. This may not be wanted.<br>
    In general, methods \b Lox::Store and \b Lox::Retrieve should exclusively be used for
    debug logging. See user manual for more information.
  @param ...  The parameters to pass.


\def Lox_Retrieve
  Invokes \alox{Lox::Retrieve} on the object of type Lox defined in macro \ref LOX_LOX.
  @param ident The identifier name of the \alib{boxing,Box} object to take the retrieved data.
  @param ...  The parameters to pass.


\def Lox_SetPrefix
  Invokes \alox{Lox::SetPrefix} on the object of type Lox defined in macro \ref LOX_LOX.
  @param ...  The parameters to pass.


\def Lox_Exception
  Invokes \alox{LogTools::Exception} providing the object of type Lox defined in macro \ref LOX_LOX.
  @param ...  The parameters to pass.

@}
@}


\~Comment ##################      ALib Module Expressions     ################################## \~

@addtogroup GrpALibMacros
@{

@name ALib Module Expressions
\anchor GrpALibMacros_mod_expressions
The macros in this section are introduced by module \alibmod_expressions.

\def  CALCULUS_CALLBACK

  Writes given callback function name \p{func} along with a comma (<c>','</c>) and a "stringified"
  version of the C++ function name.

  In release compilations, the macro resolves just to \p{func}.

  This macro is to be used to define records of types
  \alib{expressions::plugins,Calculus::FunctionEntry},
  \alib{expressions::plugins,Calculus::UnaryOpTableEntry} and
  \alib{expressions::plugins,Calculus::BinaryOpTableEntry} and to provide parameters to functions
  \alib{expressions::plugins,Calculus::AddUnaryOp} and
  \alib{expressions::plugins,Calculus::AddBinaryOp}.

  @param func     The name of the callback function.


\def  CALCULUS_DEFAULT_AUTOCAST

  This macro is to be used to define records of type
  \alib{expressions::plugins,Calculus::AutoCastEntry}.

  In debug compilation, it provides \c nullptr for table entries
  \alib{expressions::plugins::Calculus,AutoCastEntry::Callback} and
  \alib{expressions::plugins::Calculus,AutoCastEntry::DbgCallbackName}.
  In release compilations the latter is omitted.


\def  CALCULUS_SIGNATURE

  This macro is to be used to define records of type
  \alib{expressions::plugins,Calculus::FunctionEntry}.

  The macro resolves to two values separated by a comma (<c>','</c>).
  The first is a plain copy of given \p{BoxPointerArray}, which has to be a C++ array of pointers
  to type \b Box. The second value written will be the array's extent.

  @param BoxPointerArray  \c nullptr for identifiers, otherwise the list of argument sample boxes
                          provided as a <b>Box**</b>.
@}
@}



\~Comment ##################      ALib Module CLI       ################################## \~

@addtogroup GrpALibMacros
@{

@name ALib Module CLI
\anchor GrpALibMacros_mod_cli
The macros in this section are introduced by module \alibmod_cli.

\def  ALIB_CLI_COMMANDS
  Associates a specific scheme of \alib{resources,T_EnumMetaDataDecl,ALib enum meta data}
  with custom enumeration type \p{TEnum} to make the elements of the type usable
  to create \alib{cli,CommandDecl} objects.

  Parameters \p{TModule} and \p{ResourceName} are forwarded to macro \ref ALIB_RESOURCED_IN_MODULE.

  @param TEnum            The enumeration type to make \alibmod_nolink_cli commands of.
  @param TModule          The type of the module that holds the resources for \p{TEnum}.
  @param ResourceName     The resource name of the meta information of the \p{TEnum}.


\def  ALIB_CLI_PARAMETERS
  Associates a specific scheme of \alib{resources,T_EnumMetaDataDecl,ALib enum meta data}
  with custom enumeration type \p{TEnum} to make the elements of the type usable
  to create \alib{cli,ParameterDecl} objects.

  Parameters \p{TModule} and \p{ResourceName} are forwarded to macro \ref ALIB_RESOURCED_IN_MODULE.

  @param TEnum            The enumeration type to make \alibmod_nolink_cli commands of.
  @param TModule          The type of the module that holds the resources for \p{TEnum}.
  @param ResourceName     The resource name of the meta information of the \p{TEnum}.


\def  ALIB_CLI_OPTIONS
  Associates a specific scheme of \alib{resources,T_EnumMetaDataDecl,ALib enum meta data}
  with custom enumeration type \p{TEnum} to make the elements of the type usable
  to create \alib{cli,OptionDecl} objects.

  Parameters \p{TModule} and \p{ResourceName} are forwarded to macro \ref ALIB_RESOURCED_IN_MODULE.

  @param TEnum            The enumeration type to make \alibmod_nolink_cli commands of.
  @param TModule          The type of the module that holds the resources for \p{TEnum}.
  @param ResourceName     The resource name of the meta information of the \p{TEnum}.


\def  ALIB_CLI_EXIT_CODES
  Associates a specific scheme of \alib{resources,T_EnumMetaDataDecl,ALib enum meta data}
  with custom enumeration type \p{TEnum} to make the elements of the type usable
  to create \alib{cli,ExitCodeDecl} objects.

  Parameters \p{TModule} and \p{ResourceName} are forwarded to macro \ref ALIB_RESOURCED_IN_MODULE.

  @param TEnum            The enumeration type to make \alibmod_nolink_cli commands of.
  @param TModule          The type of the module that holds the resources for \p{TEnum}.
  @param ResourceName     The resource name of the meta information of the \p{TEnum}.

@}
@}




*/


