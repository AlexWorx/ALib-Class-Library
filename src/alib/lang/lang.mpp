//==================================================================================================
/// \file
/// This header-file is part of the \aliblong.
/// With supporting legacy or module builds, .mpp-files are either recognized by the build-system
/// as C++20 Module interface files, or are included by the
/// \ref alib_manual_modules_impludes "import/include headers".
///
/// \emoji :copyright: 2013-2025 A-Worx GmbH, Germany.
/// Published under \ref mainpage_license "Boost Software License".
//==================================================================================================
#if !defined(ALIB_C20_MODULES) || ((ALIB_C20_MODULES != 0) && (ALIB_C20_MODULES != 1))
#   error "Symbol ALIB_C20_MODULES has to be given to the compiler as either 0 or 1"
#endif
#if ALIB_C20_MODULES
    module;
#endif
// ======================================   Global Fragment   ======================================
#include "alib/alib.inl"

#if defined(_WIN32)
#   include <intrin.h>
#endif
#include <array>
#include <vector>
#include <algorithm>

#include <cmath>
#include <chrono>

#if !ALIB_SINGLE_THREADED
#   include <mutex>
#   include <shared_mutex>
#   include <future>
#   include <condition_variable>
#endif

#include <cstring>

#include <typeindex>
#if ALIB_DEBUG
#   include <any>
#   include <iostream>
#   include <span>
#endif

// ===========================================   Module   ==========================================
#if ALIB_C20_MODULES
    /// This is a C++ Module of the \aliblong. Due to the dual-compile option - as either
    /// C++20 Modules or legacy C++ inclusion, the C++20 Module names are not of further interest
    /// or use.<br>
    /// In general, the names equal the names of the header files listed in the chapter
    /// \ref alib_manual_modules_impludes of the \alib User Manual.
    /// This chapter, among others, provides further explanations.
    export module ALib.Lang;
#else
#endif

// ==========================================   Exports   ==========================================
ALIB_EXPORT namespace alib {
/// This is a simple copyable set of bits comprising the compilation flags.
/// @see Used with methods \alib{Bootstrap} which calls \alib{AssertALibVersionAndFlags}.
struct TCompilationFlags { unsigned char bits[5]; /**< The Flags.*/ };
}

#include "alib/lang/callerinfo.inl"
#include "alib/assert.inl"
#include "alib/mainargs.inl"
#include "alib/chk_nc.inl"
#include "alib/lang/tmp.inl"
#include "alib/lang/placeholder.inl"
#include "alib/lang/integers.inl"
#include "alib/lang/dbgtypedemangler.inl"
#include "alib/lang/dbgcriticalsections.inl"
#include "alib/lang/allocation.inl"
#include "alib/lang/commonenumdefs.inl"
#include "alib/lang/bits.inl"
#include "alib/lang/bitset.inl"
#include "alib/lang/sidilist.inl"
#include "alib/lang/bidilist.inl"
#include "alib/lang/owner.inl"
#include "alib/lang/rttrallocator.inl"
#include "alib/lang/plugins.inl"
#include "alib/lang/stdcontainerallocator.inl"
#include "alib/lang/stdtypeinfofunctors.inl"

#include "alib/characters/chartypes.inl"
#include "alib/characters/chartraits.inl"



