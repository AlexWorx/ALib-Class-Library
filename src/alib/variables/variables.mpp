//==================================================================================================
/// \file
/// This header-file is part of the \aliblong.
/// With supporting legacy or module builds, .mpp-files are either recognized by the build-system
/// as C++20 Module interface files, or are included by the
/// \ref alib_manual_modules_impludes "import/include headers".
///
/// \emoji :copyright: 2013-2025 A-Worx GmbH, Germany.
/// Published under \ref mainpage_license "Boost Software License".
//==================================================================================================
#if !defined(ALIB_C20_MODULES) || ((ALIB_C20_MODULES != 0) && (ALIB_C20_MODULES != 1))
#   error "Symbol ALIB_C20_MODULES has to be given to the compiler as either 0 or 1"
#endif
#if ALIB_C20_MODULES
    module;
#endif
// ======================================   Global Fragment   ======================================
#include "alib/boxing/boxing.prepro.hpp"
#include "alib/enumops/enumops.prepro.hpp"
#include "alib/enumrecords/enumrecords.prepro.hpp"
#include "alib/variables/variables.prepro.hpp"

#include "ALib.Strings.StdFunctors.H"
#include "ALib.Strings.Vector.H"

#if ALIB_DEBUG_BOXING
#    include <vector>
#endif
// ===========================================   Module   ==========================================
#if ALIB_C20_MODULES
    /// This is a C++ Module of the \aliblong. Due to the dual-compile option - as either
    /// C++20 Modules or legacy C++ inclusion, the C++20 Module names are not of further interest
    /// or use.<br>
    /// In general, the names equal the names of the header files listed in the chapter
    /// \ref alib_manual_modules_impludes of the \alib User Manual.
    /// This chapter, among others, provides further explanations.
    export module ALib.Variables;
    import        ALib.Lang;
    import        ALib.EnumOps;
#   if !ALIB_SINGLE_THREADED
       import     ALib.Threads;
#   endif
    import        ALib.Strings;
    import        ALib.Strings.Escaper;
    import        ALib.Strings.Token;
    import        ALib.Monomem;
    import        ALib.Monomem.SharedMonoVal;
    import        ALib.Containers.HashTable;
    import        ALib.Strings.Monomem;
    import        ALib.Containers.StringTree;
    import        ALib.Containers.List;
    import        ALib.Boxing;
    import        ALib.EnumRecords;
    import        ALib.Resources;
#else
#   include      "ALib.Lang.H"
#   if !ALIB_SINGLE_THREADED
#      include  "ALib.Threads.H"
#   endif
#   include      "ALib.Strings.H"
#   include      "ALib.Strings.Token.H"
#   include      "ALib.Monomem.H"
#   include      "ALib.Monomem.SharedMonoVal.H"
#   include      "ALib.Containers.HashTable.H"
#   include      "ALib.Strings.Monomem.H"
#   include      "ALib.Strings.Escaper.H"
#   include      "ALib.Containers.StringTree.H"
#   include      "ALib.Containers.List.H"
#   include      "ALib.Boxing.H"
#   include      "ALib.EnumRecords.H"
#   include      "ALib.Resources.H"
#endif

// ==========================================   Exports   ==========================================
#include "alib/variables/vmeta.inl"
#include "alib/variables/erpriority.inl"
#include "alib/variables/declaration.inl"


#include "alib/variables/configuration.inl"


