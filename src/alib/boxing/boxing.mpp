//==================================================================================================
/// \file
/// This header-file is part of the \aliblong.
/// With supporting legacy or module builds, .mpp-files are either recognized by the build-system
/// as C++20 Module interface files, or are included by the
/// \ref alib_manual_modules_impludes "import/include headers".
///
/// \emoji :copyright: 2013-2025 A-Worx GmbH, Germany.
/// Published under \ref mainpage_license "Boost Software License".
//==================================================================================================
#if !defined(ALIB_C20_MODULES) || ((ALIB_C20_MODULES != 0) && (ALIB_C20_MODULES != 1))
#   error "Symbol ALIB_C20_MODULES has to be given to the compiler as either 0 or 1"
#endif
#if ALIB_C20_MODULES
    module;
#endif
// ======================================   Global Fragment   ======================================
#include "alib/boxing/boxing.prepro.hpp"

#include <cstring>
#include <functional>
#include <vector>
#include <typeindex>
#include <array>
#if ALIB_DEBUG && (!ALIB_MONOMEM || !ALIB_CONTAINERS)
#   include <unordered_set>
#   include <unordered_map>
#endif

#if ALIB_DEBUG_BOXING
#   include <tuple>
#endif

// ===========================================   Module   ==========================================
#if ALIB_C20_MODULES
    /// This is a C++ Module of the \aliblong. Due to the dual-compile option - as either
    /// C++20 Modules or legacy C++ inclusion, the C++20 Module names are not of further interest
    /// or use.<br>
    /// In general, the names equal the names of the header files listed in the chapter
    /// \ref alib_manual_modules_impludes of the \alib User Manual.
    /// This chapter, among others, provides further explanations.
    export module ALib.Boxing;
#   if !ALIB_SINGLE_THREADED
       import     ALib.Threads;
#   endif
    import        ALib.Singletons;
    import        ALib.Lang;
    import        ALib.Time;
#  if ALIB_MONOMEM
    import        ALib.Monomem;
#   if ALIB_CONTAINERS
    import        ALib.Containers.HashTable;
#   endif
#  endif
#  if ALIB_STRINGS
    import        ALib.Strings;
    import        ALib.Strings.Token;
#  endif
#else
#   if !ALIB_SINGLE_THREADED
#      include  "ALib.Threads.H"
#   endif
    #include "ALib.Singletons.H"
    #include "ALib.Lang.H"
    #include "ALib.Containers.HashTable.H"
    #include "ALib.Time.H"
    #include "ALib.Monomem.H"
    #include "ALib.Strings.H"
    #include "ALib.Strings.Token.H"
#endif


// ==========================================   Exports   ==========================================
#include "alib/boxing/placeholder.inl"
#include "alib/boxing/boxingtraits.inl"
#include "alib/boxing/functiondecls.inl"
#include "alib/boxing/detail/vtable.inl"
#include "alib/boxing/box.inl"
#include "alib/boxing/boxes.inl"
#include "alib/boxing/enum.inl"
#include "alib/boxing/boxing_debug.inl"
#include "alib/boxing/boxstrap.inl"

#include "alib/boxing/strings_appendables.inl"
#include "alib/boxing/extensions/strings_tfield.inl"



