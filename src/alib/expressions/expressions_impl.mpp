//==================================================================================================
/// \file
/// This header-file is part of the \aliblong.
/// With supporting legacy or module builds, .mpp-files are either recognized by the build-system
/// as C++20 Module interface files, or are included by the
/// \ref alib_manual_modules_impludes "import/include headers".
///
/// \emoji :copyright: 2013-2025 A-Worx GmbH, Germany.
/// Published under \ref mainpage_license "Boost Software License".
//==================================================================================================
#if !defined(ALIB_C20_MODULES) || ((ALIB_C20_MODULES != 0) && (ALIB_C20_MODULES != 1))
#   error "Symbol ALIB_C20_MODULES has to be given to the compiler as either 0 or 1"
#endif
#if ALIB_C20_MODULES
    module;
#endif
// ======================================   Global Fragment   ======================================
#include "alib/boxing/boxing.prepro.hpp"
#include "alib/enumops/enumops.prepro.hpp"
#include "alib/enumrecords/enumrecords.prepro.hpp"
#include "alib/resources/resources.prepro.hpp"
#include "alib/camp/camp.prepro.hpp"
#include "alib/expressions/expressions.prepro.hpp"

#include <stack>
#include <bitset>
#include <vector>
#include "ALib.Monomem.StdContainers.H"
#include "ALib.Boxing.StdFunctors.H"
#include "ALib.Strings.StdFunctors.H"
#include "ALib.Strings.Vector.H"
// ===========================================   Module   ==========================================
#if ALIB_C20_MODULES
    /// This is a C++ Module of the \aliblong. Due to the dual-compile option - as either
    /// C++20 Modules or legacy C++ inclusion, the C++20 Module names are not of further interest
    /// or use.<br>
    /// In general, the names equal the names of the header files listed in the chapter
    /// \ref alib_manual_modules_impludes of the \alib User Manual.
    /// This chapter, among others, provides further explanations.
    export module ALib.Expressions.Impl;
    import        ALib.Expressions;
    import        ALib.Lang;
    import        ALib.EnumOps;
    import        ALib.Containers.List;
    import        ALib.Containers.HashTable;
    import        ALib.Boxing;
    import        ALib.Strings;
    import        ALib.Strings.Token;
    import        ALib.Singletons;
    import        ALib.Monomem;
    import        ALib.Monomem.SharedMonoVal;
    import        ALib.Resources;
    import        ALib.EnumRecords;
    import        ALib.Format;
    import        ALib.Exceptions;
    import        ALib.Variables;
    import        ALib.Camp;
#else
#   include      "ALib.Expressions.H"
#   include      "ALib.Lang.H"
#   include      "ALib.Containers.List.H"
#   include      "ALib.Containers.HashTable.H"
#   include      "ALib.Boxing.H"
#   include      "ALib.Strings.H"
#   include      "ALib.Strings.Token.H"
#   include      "ALib.Strings.StdFunctors.H"
#   include      "ALib.Singletons.H"
#   include      "ALib.Monomem.H"
#   include      "ALib.Monomem.SharedMonoVal.H"
#   include      "ALib.EnumRecords.H"
#   include      "ALib.Resources.H"
#   include      "ALib.Format.H"
#   include      "ALib.Exceptions.H"
#   include      "ALib.Variables.H"
#   include      "ALib.Camp.H"
#endif

// ==========================================   Exports   ==========================================
#include "alib/expressions/plugins/calculus.inl"
#include "alib/expressions/plugins/arithmetics.inl"
#include "alib/expressions/plugins/autocast.inl"
#include "alib/expressions/plugins/dateandtime.inl"
#include "alib/expressions/plugins/elvisoperator.inl"
#include "alib/expressions/plugins/math.inl"
#include "alib/expressions/plugins/strings.inl"

#include "alib/expressions/detail/ast_impl.inl"
#include "alib/expressions/detail/virtualmachine.inl"
#include "alib/expressions/detail/parser_impl.inl"
#include "alib/expressions/detail/program.inl"




